name: Reusable TruffleHog Secret Scan

on:
  workflow_call:
    inputs:
      fail-on-unverified:
        description: "Fail workflow on unverified secrets"
        required: false
        default: "false"
        type: string
      fail-on-verified:
        description: "Fail workflow on verified secrets"
        required: false
        default: "true"
        type: string
      scan-type:
        description: "Scan type: commits, filesystem, or both"
        required: false
        default: "both"
        type: string
      scan-scope:
        description: "Scan scope: changed-files, full-repo, or both"
        required: false
        default: "full-repo"
        type: string
      trufflehog-version:
        description: "TruffleHog version to use (optional override)"
        required: false
        default: ""
        type: string

permissions:
  contents: read
  pull-requests: write
  checks: write

env:
  TRUFFLEHOG_VERSION: "3.75.0" # ratchet:trufflesecurity/trufflehog@v3.75.0

jobs:
  trufflehog-scan:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@692973e3d937129bcbf40652eb9f2f61becf3332 # v4.1.7
        with:
          # Limited history to reduce credential exposure risk
          # 100 commits covers most recent development for security scanning
          fetch-depth: 100
          persist-credentials: false

      - name: Set TruffleHog version
        id: version
        env:
          INPUT_VERSION: ${{ inputs.trufflehog-version }}
          DEFAULT_VERSION: ${{ env.TRUFFLEHOG_VERSION }}
        run: |
          if [ -n "${INPUT_VERSION}" ]; then
            echo "version=${INPUT_VERSION}" >> "${GITHUB_OUTPUT}"
          else
            echo "version=v${DEFAULT_VERSION}" >> "${GITHUB_OUTPUT}"
          fi

      - name: Install TruffleHog
        run: |
          curl -sSfL https://raw.githubusercontent.com/trufflesecurity/trufflehog/main/scripts/install.sh \
            | sh -s -- -b /usr/local/bin "${{ steps.version.outputs.version }}"
          trufflehog --version

      - name: Create custom detectors config
        run: |
          cat > trufflehog-config.yml <<'EOF'
          # Custom detectors for Grafana secrets
          detectors:
            - name: "grafana-service-account"
              keywords:
                - "glsa_"
              regex:
                token: 'glsa_[A-Za-z0-9]{48}'
            - name: "grafana-api-key"
              keywords:
                - "eyJrIjoi"
              regex:
                token: 'eyJrIjoi[A-Za-z0-9+/=]{40,}'
            - name: "grafana-sa-token-with-prefix"
              keywords:
                - "GRAFANA_SA_TOKEN"
              regex:
                token: 'GRAFANA_SA_TOKEN=glsa_[A-Za-z0-9]{48}'
          EOF

          echo "=== Custom detector config ==="
          cat trufflehog-config.yml
          echo "=============================="

      - name: Get changed files for PR
        id: changed-files
        if: github.event_name == 'pull_request'
        env:
          BASE_SHA: ${{ github.event.pull_request.base.sha }}
          HEAD_SHA: ${{ github.sha }}
        run: |
          git diff --name-only "${BASE_SHA}..${HEAD_SHA}" > changed-files.txt
          echo "Changed files in this PR:"
          cat changed-files.txt || echo "No files changed"

      - name: Run TruffleHog Scan
        id: scan
        env:
          SCAN_TYPE: ${{ inputs.scan-type }}
          SCAN_SCOPE: ${{ inputs.scan-scope }}
          EVENT_NAME: ${{ github.event_name }}
        run: |
          set +e

          # Initialize result files
          echo "[]" > all-results.json

          # Full repository scanning
          if [[ "${SCAN_SCOPE}" == "full-repo" || "${SCAN_SCOPE}" == "both" ]]; then
            echo "Running full repository scan..."

            if [[ "${SCAN_TYPE}" == "commits" || "${SCAN_TYPE}" == "both" ]]; then
              echo "Scanning git commit history..."
              echo "=== TruffleHog command ==="
              echo "trufflehog git file://. --json --no-update --config=trufflehog-config.yml"

              # Test without custom detectors first
              echo "=== Testing without custom detectors ==="
              trufflehog git file://. \
                --json \
                --no-update \
                > commit-results-basic.json || true

              echo "Basic scan results:"
              wc -l commit-results-basic.json || echo "No basic results"

              # Test with custom detectors
              echo "=== Testing with custom detectors ==="
              trufflehog git file://. \
                --json \
                --no-update \
                --config=trufflehog-config.yml \
                > commit-results.json || true

              echo "=== Raw results ==="
              head -20 commit-results.json || echo "No results file"
              echo "=== Results file size ==="
              wc -l commit-results.json || echo "No results file"
            fi

            if [[ "${SCAN_TYPE}" == "filesystem" || "${SCAN_TYPE}" == "both" ]]; then
              echo "Scanning current filesystem..."
              trufflehog filesystem . \
                --json \
                --no-update \
                --config=trufflehog-config.yml \
                > fs-results.json || true
            fi
          fi

          # Changed files scanning (PR only)
          if [[ "${EVENT_NAME}" == "pull_request" ]]; then
            if [[ "${SCAN_SCOPE}" == "changed-files" || "${SCAN_SCOPE}" == "both" ]]; then
              if [[ -s "changed-files.txt" ]]; then
                echo "Scanning changed files..."
                echo "[]" > changed-files-results.json
                while IFS= read -r file; do
                  if [[ -f "${file}" ]]; then
                    echo "Scanning: ${file}"
                    if trufflehog filesystem "${file}" \
                        --json \
                        --no-update \
                        --config=trufflehog-config.yml \
                        | jq -s 'add' changed-files-results.json - > tmp.json; then
                      mv tmp.json changed-files-results.json
                    fi
                  fi
                done < changed-files.txt
              else
                echo "No changed files to scan"
              fi
            fi
          fi

          # Merge all results - TruffleHog outputs newline-delimited JSON (NDJSON)
          echo "Merging scan results..."
          touch all-results.ndjson  # Create empty file
          for f in commit-results-basic.json commit-results.json fs-results.json changed-files-results.json; do
            if [[ -s "${f}" ]]; then
              echo "Merging results from ${f}"
              cat "${f}" >> all-results.ndjson
            fi
          done

          # Convert NDJSON to JSON array for processing
          if [[ -s all-results.ndjson ]]; then
            jq -s '.' all-results.ndjson > all-results.json
          else
            echo "[]" > all-results.json
          fi

          # Count results
          VERIFIED=$(jq '[.[] | select(.Verified==true)] | length' all-results.json)
          UNVERIFIED=$(jq '[.[] | select(.Verified==false)] | length' all-results.json)
          TOTAL=$((VERIFIED+UNVERIFIED))

          echo "Scan Summary:"
          echo "Verified secrets: ${VERIFIED}"
          echo "Unverified secrets: ${UNVERIFIED}"
          echo "Total findings: ${TOTAL}"

          {
            echo "verified=${VERIFIED}"
            echo "unverified=${UNVERIFIED}"
            echo "total=${TOTAL}"
          } >> "${GITHUB_OUTPUT}"

      - name: Hide any previous TruffleHog comments
        if: ${{ !cancelled() && github.event_name == 'pull_request' && github.event.pull_request.head.repo.full_name == github.repository }}
        id: hide-comments
        uses: actions/github-script@60a0d83039c74a4aee543508d2ffcb1c3799cdea # v7.0.1
        with:
          github-token: ${{ github.token }}
          script: |
            const { owner, repo } = context.repo;
            const issue_number = context.issue.number;

            try {
              const { data: comments } = await github.rest.issues.listComments({
                owner,
                repo,
                issue_number,
              });

              // Find and hide all comments that contain "TruffleHog Scan Results"
              for (const comment of comments) {
                if (comment.body.includes('TruffleHog Scan Results') ||
                    comment.body.includes('trufflehog-scan-comment') ||
                    comment.body.includes('**TruffleHog Scan Results**')) {
                  console.log(`Hiding comment ${comment.id}`);

                  // Update comment to be minimized/hidden by adding minimized markdown
                  const hiddenBody = `<details>\n<summary>Previous TruffleHog scan results (click to expand)</summary>\n\n${comment.body}\n</details>`;

                  await github.rest.issues.updateComment({
                    owner,
                    repo,
                    comment_id: comment.id,
                    body: hiddenBody
                  });
                }
              }

              // Set output for compatibility with int128/comment-action
              core.setOutput('ends-with', '<!-- comment-action/${{ github.workflow }}/${{ github.job }} -->');
            } catch (error) {
              console.log('Error hiding comments:', error.message);
              // Set output anyway for compatibility
              core.setOutput('ends-with', '<!-- comment-action/${{ github.workflow }}/${{ github.job }} -->');
            }

      - name: Generate TruffleHog comment body
        if: ${{ !cancelled() && github.event_name == 'pull_request' && github.event.pull_request.head.repo.full_name == github.repository }}
        id: comment-body
        run: |
          if [[ ! -f "all-results.json" || ! -s "all-results.json" ]]; then
            echo "No results file found"
            {
              echo 'body<<EOF'
              echo '**TruffleHog Scan Results**'
              echo ''
              echo 'No secrets detected in this PR.'
              echo 'EOF'
            } >> "$GITHUB_OUTPUT"
            exit 0
          fi

          # Parse results
          VERIFIED=$(jq '[.[] | select(.Verified==true)] | length' all-results.json)
          UNVERIFIED=$(jq '[.[] | select(.Verified==false)] | length' all-results.json)
          TOTAL=$((VERIFIED+UNVERIFIED))

          if [[ $TOTAL -eq 0 ]]; then
            {
              echo 'body<<EOF'
              echo '**TruffleHog Scan Results**'
              echo ''
              echo 'No secrets detected in this PR.'
              echo 'EOF'
            } >> "$GITHUB_OUTPUT"
          else
            # Generate findings list
            FINDINGS=$(jq -r '.[] |
              "- " +
              (if .Verified then "**VERIFIED SECRET**" else "**Possible secret**" end) +
              " (" + .DetectorName + ") at `" +
              ((.SourceMetadata?.Data?.Filesystem?.file // .SourceMetadata?.Data?.Git?.file) // "unknown") +
              ":" +
              ((.SourceMetadata?.Data?.Filesystem?.line // .SourceMetadata?.Data?.Git?.line) | tostring) +
              "` → `" +
              (if (.Raw | length) > 8 then (.Raw[:4] + "***" + .Raw[-4:]) else "***" end) +
              "`"' all-results.json)

            SEVERITY=""
            if [[ $VERIFIED -gt 0 ]]; then
              SEVERITY="**CRITICAL**"
            else
              SEVERITY="**WARNING**"
            fi

            ACTION_TEXT=""
            if [[ $VERIFIED -gt 0 ]]; then
              ACTION_TEXT="**ACTION REQUIRED:** Rotate verified credentials immediately."
            else
              ACTION_TEXT="**Review:** Check if unverified secrets are false positives."
            fi

            {
              echo 'body<<EOF'
              echo "${SEVERITY} **TruffleHog Scan Results**"
              echo ''
              echo "**Summary:** Found ${TOTAL} potential secrets (${VERIFIED} verified, ${UNVERIFIED} unverified)"
              echo ''
              echo "${FINDINGS}"
              echo ''
              echo "${ACTION_TEXT}"
              echo 'EOF'
            } >> "$GITHUB_OUTPUT"
          fi

      - name: Comment on PR
        if: ${{ !cancelled() && github.event_name == 'pull_request' && github.event.pull_request.head.repo.full_name == github.repository }}
        uses: int128/comment-action@f4faf53666ef83da7d274fa2007e9212c4d719c3 # v1.39.0
        with:
          post: |
            ${{ steps.comment-body.outputs.body }}
            ${{ steps.hide-comments.outputs.ends-with }}

      - name: Create Check Status
        uses: actions/github-script@60a0d83039c74a4aee543508d2ffcb1c3799cdea # v7.0.1
        env:
          VERIFIED_COUNT: ${{ steps.scan.outputs.verified }}
          UNVERIFIED_COUNT: ${{ steps.scan.outputs.unverified }}
          TOTAL_COUNT: ${{ steps.scan.outputs.total }}
          FAIL_ON_VERIFIED: ${{ inputs.fail-on-verified }}
          FAIL_ON_UNVERIFIED: ${{ inputs.fail-on-unverified }}
          SCAN_TYPE: ${{ inputs.scan-type }}
          SCAN_SCOPE: ${{ inputs.scan-scope }}
          TRUFFLEHOG_VERSION: ${{ inputs.trufflehog-version }}
        with:
          github-token: ${{ github.token }}
          script: |
            const verified = parseInt(process.env.VERIFIED_COUNT || "0", 10);
            const unverified = parseInt(process.env.UNVERIFIED_COUNT || "0", 10);
            const total = parseInt(process.env.TOTAL_COUNT || "0", 10);

            const shouldFail = (
              (process.env.FAIL_ON_VERIFIED === "true" && verified > 0) ||
              (process.env.FAIL_ON_UNVERIFIED === "true" && unverified > 0)
            );

            const conclusion = shouldFail ? "failure" : "success";
            const title = total > 0
              ? `Found ${total} potential secrets (${verified} verified, ${unverified} unverified)`
              : "No secrets detected";

            await github.rest.checks.create({
              owner: context.repo.owner,
              repo: context.repo.repo,
              name: "TruffleHog Secret Scan",
              head_sha: context.sha,
              status: "completed",
              conclusion,
              output: {
                title,
                summary: "TruffleHog security scan completed",
                text: `Scan configuration:\n- Type: ${process.env.SCAN_TYPE}\n- Scope: ${process.env.SCAN_SCOPE}\n- Version: ${process.env.TRUFFLEHOG_VERSION || process.env.DEFAULT_VERSION}\n\nResults: ${title}`
              }
            });

      - name: Check and fail workflow if secrets found
        env:
          VERIFIED_COUNT: ${{ steps.scan.outputs.verified }}
          UNVERIFIED_COUNT: ${{ steps.scan.outputs.unverified }}
          FAIL_ON_VERIFIED: ${{ inputs.fail-on-verified }}
          FAIL_ON_UNVERIFIED: ${{ inputs.fail-on-unverified }}
        run: |
          SHOULD_FAIL=false

          if [[ "${FAIL_ON_VERIFIED}" == "true" && "${VERIFIED_COUNT}" != "0" ]]; then
            SHOULD_FAIL=true
          fi

          if [[ "${FAIL_ON_UNVERIFIED}" == "true" && "${UNVERIFIED_COUNT}" != "0" ]]; then
            SHOULD_FAIL=true
          fi

          if [[ "${SHOULD_FAIL}" == "true" ]]; then
            echo "Workflow failed due to secrets found"
            echo "Verified secrets: ${VERIFIED_COUNT}"
            echo "Unverified secrets: ${UNVERIFIED_COUNT}"
            exit 1
          else
            echo "No action needed - secrets found but within configured thresholds"
          fi
