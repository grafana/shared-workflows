name: Reusable Trufflehog Secret Scan

on:
  workflow_call:
    inputs:
      fail-on-secrets:
        description: "Fail the workflow if secrets are found"
        required: false
        default: "true"
        type: string
      extra_args:
        description: "Extra arguments to pass to Trufflehog"
        required: false
        default: ""
        type: string

jobs:
  trufflehog-scan:
    runs-on: ubuntu-x64-small
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          persist-credentials: false

      - name: Remove old Trufflehog (if present)
        run: |
          pip uninstall -y truffleHog || true
          pip uninstall -y trufflehog || true

      - name: Install Trufflehog (pinned to commit)
        run: |
          curl -sSfL https://raw.githubusercontent.com/trufflesecurity/trufflehog/0f58ae7c5036094a1e3e750d18772af92821b503/scripts/install.sh | sh -s -- -b /usr/local/bin
          trufflehog --version

      - name: Create Custom Regex Patterns
        run: |
          cat > custom-patterns.txt << 'EOF'
          # Grafana API Key - Pattern: eyJrIjoi[A-Za-z0-9]{70,}={0,2}
          eyJrIjoi[A-Za-z0-9]{70,}={0,2}
          
          # Grafana Service Account Token - Pattern: glsa_[A-Za-z0-9]{32}_[A-Fa-f0-9]{8}
          glsa_[A-Za-z0-9]{32}_[A-Fa-f0-9]{8}
          
          # Grafana Cloud API Token - Pattern: glc_[A-Za-z0-9+/]{32,}={0,2}
          glc_[A-Za-z0-9+/]{32,}={0,2}
          
          # Grafana Database Connection Strings
          (mysql|postgres|postgresql)://[^:\s]+:[^@\s]+@[^/\s]+/[^?\s]*grafana[^?\s]*
          
          # Grafana Configuration Secrets
          GF_SECURITY_SECRET_KEY\s*[=:]\s*["\']?([A-Za-z0-9+/]{32,}={0,2})["\']?
          GF_SECURITY_ADMIN_PASSWORD\s*[=:]\s*["\']?([^"\'\\s]{8,})["\']?
          GF_SMTP_PASSWORD\s*[=:]\s*["\']?([^"\'\\s]{6,})["\']?
          GF_AUTH_[A-Z_]*CLIENT_SECRET\s*[=:]\s*["\']?([A-Za-z0-9_-]{20,})["\']?
          GF_ENTERPRISE_LICENSE_TEXT\s*[=:]\s*["\']?([A-Za-z0-9+/=]{100,})["\']?
          EOF

      - name: Create Trufflehog Exclusions File
        run: |
          cat > exclude_paths.txt << 'EOF'
          .git
          .github
          node_modules
          venv
          env
          __pycache__
          .pytest_cache
          .venv
          dist
          build
          EOF

      - name: Run Trufflehog with Built-in Detectors
        env:
          EXTRA_ARGS: ${{ inputs.extra_args }}
        run: |
          echo "Running Trufflehog with built-in detectors..."
          # Run without --fail first to capture results
          trufflehog filesystem . \
            --json \
            --no-update \
            --results=verified,unknown \
            --exclude-paths=exclude_paths.txt \
            "$EXTRA_ARGS" \
            > trufflehog-builtin-results.json || true
          
          # Check if secrets were found
          if [ -s trufflehog-builtin-results.json ]; then
            echo "üö® SECRETS DETECTED by Trufflehog built-in detectors!"
            echo "üìÑ Details:"
            cat trufflehog-builtin-results.json | jq -r '.[] | "FILE: \(.SourceMetadata.Data.Filesystem.file // "unknown") | LINE: \(.SourceMetadata.Data.Filesystem.line // "unknown") | DETECTOR: \(.DetectorName) | SECRET: \(.Raw[0:50])..."' 2>/dev/null || cat trufflehog-builtin-results.json
          else
            echo "‚úÖ No secrets found by Trufflehog built-in detectors"
          fi

      - name: Run Custom Grafana Pattern Scan
        run: |
          echo "Running additional scan for Grafana-specific patterns..."
          echo "" > custom-grafana-results.txt
          secrets_found=false
          
          while IFS= read -r pattern || [ -n "$pattern" ]; do
            if [[ ! "$pattern" =~ ^# ]] && [[ -n "${pattern// }" ]]; then
              echo "üîç Scanning for Grafana pattern: $pattern"
              results=$(grep -r -n -E "$pattern" . \
                --exclude-dir=.git \
                --exclude-dir=.github \
                --exclude-dir=node_modules \
                --exclude-dir=venv \
                --exclude-dir=env \
                --include="*.go" \
                --include="*.js" \
                --include="*.ts" \
                --include="*.json" \
                --include="*.yaml" \
                --include="*.yml" \
                --include="*.env" \
                --include="*.conf" \
                --include="*.config" \
                --include="*.ini" \
                --include="*.toml" \
                --include="*.txt" \
                --include="*.md" \
                2>/dev/null || true)
              
              if [ ! -z "$results" ]; then
                echo "üö® GRAFANA SECRET DETECTED!"
                echo "Pattern: $pattern"
                echo "$results"
                echo "---"
                echo "$results" >> custom-grafana-results.txt
                secrets_found=true
              fi
            fi
          done < custom-patterns.txt
          
          if [ "$secrets_found" = false ]; then
            echo "‚úÖ No Grafana-specific secrets found"
          fi

      - name: Combine Results
        run: |
          echo "=== TRUFFLEHOG BUILT-IN RESULTS ===" > trufflehog-results.json
          cat trufflehog-builtin-results.json >> trufflehog-results.json || echo "No built-in results" >> trufflehog-results.json
          echo "" >> trufflehog-results.json
          echo "=== CUSTOM GRAFANA PATTERN RESULTS ===" >> trufflehog-results.json
          cat custom-grafana-results.txt >> trufflehog-results.json || echo "No custom pattern results" >> trufflehog-results.json

      - name: Check for Any Secrets and Fail if Found
        run: |
          echo "üìä FINAL SECURITY SCAN SUMMARY:"
          echo "================================"
          
          # Check if any secrets were found
          builtin_secrets=false
          grafana_secrets=false
          
          if [ -s trufflehog-builtin-results.json ]; then
            builtin_secrets=true
            echo "‚ùå Built-in detectors found secrets"
          else
            echo "‚úÖ Built-in detectors found no secrets"
          fi
          
          if [ -s custom-grafana-results.txt ]; then
            grafana_secrets=true
            echo "‚ùå Grafana custom patterns found secrets"
          else
            echo "‚úÖ Grafana custom patterns found no secrets"
          fi
          
          # Show combined results for debugging
          echo ""
          echo "üìÑ DETAILED RESULTS:"
          echo "==================="
          cat trufflehog-results.json || echo "No results file found"
          
          # Fail the workflow if any secrets were found
          if [ "$builtin_secrets" = true ] || [ "$grafana_secrets" = true ]; then
            echo ""
            echo "üö® SECURITY SCAN FAILED: Secrets detected in repository!"
            echo "Please review the findings above and remove any exposed secrets."
            exit 1
          else
            echo ""
            echo "üéâ SECURITY SCAN PASSED: No secrets detected!"
          fi

      - name: Debug Trufflehog output
        run: cat trufflehog-results.json || echo "No trufflehog-results.json found"

      - name: Comment on PR with all Trufflehog findings (full JSON, clean format)
        if: ${{ github.event.pull_request != null }}
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const fs = require('fs');
            let findings = [];
            try {
              const lines = fs.readFileSync('trufflehog-results.json', 'utf8')
                .split('\n')
                .filter(Boolean);
              for (const line of lines) {
                let finding;
                try {
                  finding = JSON.parse(line);
                } catch (e) {
                  continue;
                }
                if (finding.Raw) {
                  findings.push(
                    [
                      '---',
                      '**Trufflehog Finding:**',
                      '',
                      '```json',
                      JSON.stringify(finding, null, 2),
                      '```',
                      ''
                    ].join('\n')
                  );
                }
              }
            } catch (e) {
              findings = ['(Could not parse Trufflehog report)'];
            }
            const body = findings.length
              ? `üö® **Trufflehog found secrets in this PR!**\n\n${findings.join('\n')}`
              : "‚úÖ Trufflehog ran and no secrets were found.";
            github.rest.issues.createComment({
              issue_number: context.payload.pull_request.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body
            });

      - name: Fail if any secrets found
        if: ${{ inputs.fail-on-secrets == 'true' && hashFiles('trufflehog-results.json') != '' }}
        run: |
          if grep -q '"Raw":' trufflehog-results.json; then
            echo "Secrets found! Failing the workflow."
            exit 1
          fi
