name: Reusable Trufflehog Secret Scan

on:
  workflow_call:
    inputs:
      fail-on-secrets:
        description: "Fail the workflow if secrets are found"
        required: false
        default: "true"
        type: string
      extra_args:
        description: "Extra arguments to pass to Trufflehog"
        required: false
        default: ""
        type: string
      scan-mode:
        description: "Scan mode: 'full' for complete repo scan, 'delta' for changed files only"
        required: false
        default: "auto"
        type: string
      history-scan:
        description: "Enable git history scanning for secrets"
        required: false
        default: "false"
        type: string
      history-depth:
        description: "Number of commits to scan in history (default: 100)"
        required: false
        default: "100"
        type: string

jobs:
  prepare-scan:
    runs-on: ubuntu-x64-small
    outputs:
      files-to-scan: ${{ steps.get-files.outputs.files }}
      scan-count: ${{ steps.get-files.outputs.count }}
      cache-key: ${{ steps.cache-key.outputs.key }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          persist-credentials: false
          fetch-depth: 0

      - name: Generate cache key
        id: cache-key
        run: echo "key=trufflehog-${{ runner.os }}-0f58ae7c5036094a1e3e750d18772af92821b503" >> $GITHUB_OUTPUT

      - name: Determine files to scan
        id: get-files
        env:
          SCAN_MODE: ${{ inputs.scan-mode }}
        run: |
          if [[ "$GITHUB_EVENT_NAME" == "pull_request" && ("$SCAN_MODE" == "auto" || "$SCAN_MODE" == "delta") ]]; then
            echo "🔍 Delta scan mode: scanning ALL changed files"
            
            # Get ALL changed files (no extension filtering)
            git diff --name-only --diff-filter=ACMRT ${{ github.event.pull_request.base.sha }}..${{ github.sha }} \
              | head -1000 > files_to_scan.txt || echo "" > files_to_scan.txt
            
            # Filter out build artifacts, dependencies, and other non-secret files
            grep -v -E '(^\.git/|node_modules/|vendor/|dist/|build/|__pycache__/|\.min\.(js|css)$|\.lock$|\.sum$|\.mod$|^go\.sum$|^package-lock\.json$|^yarn\.lock$|^Pipfile\.lock$)' files_to_scan.txt > filtered_files.txt || echo "" > filtered_files.txt
            
            SCAN_COUNT=$(wc -l < filtered_files.txt)
            echo "Changed files (excluding build artifacts): $SCAN_COUNT"
            
            if [[ $SCAN_COUNT -eq 0 ]]; then
              echo "No relevant files changed - skipping scan"
              echo "files=" >> $GITHUB_OUTPUT
              echo "count=0" >> $GITHUB_OUTPUT
              exit 0
            fi
            
            # Convert to space-separated list
            FILES=$(tr '\n' ' ' < filtered_files.txt | sed 's/[[:space:]]*$//')
            echo "files=$FILES" >> $GITHUB_OUTPUT
            echo "count=$SCAN_COUNT" >> $GITHUB_OUTPUT
            
          else
            echo "🔍 Full scan mode: scanning entire repository"
            # For full scans, we'll let trufflehog handle file discovery
            echo "files=." >> $GITHUB_OUTPUT
            echo "count=full" >> $GITHUB_OUTPUT
          fi

  builtin-detectors:
    needs: prepare-scan
    if: needs.prepare-scan.outputs.scan-count != '0'
    runs-on: ubuntu-x64-small
    outputs:
      secrets-found: ${{ steps.scan.outputs.secrets-found }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          persist-credentials: false

      - name: Cache Trufflehog binary
        uses: actions/cache@v4
        with:
          path: /usr/local/bin/trufflehog
          key: ${{ needs.prepare-scan.outputs.cache-key }}

      - name: Install Trufflehog (if not cached)
        run: |
          if [ ! -f /usr/local/bin/trufflehog ]; then
            echo "Installing TruffleHog..."
            curl -sSfL https://raw.githubusercontent.com/trufflesecurity/trufflehog/0f58ae7c5036094a1e3e750d18772af92821b503/scripts/install.sh | sh -s -- -b /usr/local/bin
          else
            echo "Using cached TruffleHog binary"
          fi
          trufflehog --version

      - name: Create optimized exclude patterns
        run: |
          cat > exclude_paths.txt << 'EOF'
          .git
          node_modules
          venv
          env
          __pycache__
          .pytest_cache
          .venv
          dist
          build
          *.min.js
          *.min.css
          vendor
          third_party
          trufflehog-.*\.json
          custom-.*\.txt
          exclude_paths\.txt
          EOF

      - name: Run TruffleHog scan
        id: scan
        env:
          FILES_TO_SCAN: ${{ needs.prepare-scan.outputs.files-to-scan }}
          EXTRA_ARGS: ${{ inputs.extra_args }}
        run: |
          echo "🔍 Running TruffleHog with built-in detectors..."
          
          # Prepare scan command
          if [[ "$FILES_TO_SCAN" == "." ]]; then
            echo "Scanning entire repository"
            SCAN_TARGET="."
          else
            echo "Scanning specific files: $FILES_TO_SCAN"
            SCAN_TARGET="$FILES_TO_SCAN"
          fi
          
          # Run TruffleHog with optimized settings for speed
          timeout 180 trufflehog filesystem $SCAN_TARGET \
            --json \
            --no-update \
            --results=verified,unverified \
            --exclude-paths=exclude_paths.txt \
            --no-verification \
            --concurrency=6 \
            $EXTRA_ARGS > builtin-results.json || {
              EXIT_CODE=$?
              if [[ $EXIT_CODE -eq 124 ]]; then
                echo "⚠️ Scan timed out after 3 minutes"
                echo '{"timeout": true, "message": "Scan timed out"}' > builtin-results.json
              else
                echo "Scan completed with exit code: $EXIT_CODE"
              fi
            }
          
          # Check results efficiently
          if [[ -s builtin-results.json ]] && grep -q '"Raw"' builtin-results.json; then
            echo "🚨 Secrets detected by built-in detectors"
            echo "secrets-found=true" >> $GITHUB_OUTPUT
          else
            echo "✅ No secrets found by built-in detectors"
            echo "secrets-found=false" >> $GITHUB_OUTPUT
          fi

      - name: Upload results artifact
        if: steps.scan.outputs.secrets-found == 'true'
        uses: actions/upload-artifact@v4
        with:
          name: trufflehog-builtin-results
          path: builtin-results.json
          retention-days: 30

  custom-patterns:
    needs: prepare-scan
    if: needs.prepare-scan.outputs.scan-count != '0'
    runs-on: ubuntu-x64-small
    outputs:
      secrets-found: ${{ steps.patterns.outputs.secrets-found }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          persist-credentials: false

      - name: Run Grafana-specific pattern scan
        id: patterns
        env:
          FILES_TO_SCAN: ${{ needs.prepare-scan.outputs.files-to-scan }}
        run: |
          echo "🔍 Running optimized Grafana-specific pattern scan..."
          
          # Combined regex pattern for efficiency
          GRAFANA_PATTERNS='(eyJrIjoi[A-Za-z0-9+/=]{40,}|glsa_[A-Za-z0-9]{32}_[A-Fa-f0-9]{8}|glc_[A-Za-z0-9+/]{32,}={0,2}|(mysql|postgres|postgresql)://[^:\s]+:[^@\s]+@[^/\s]+/[^?\s]*grafana[^?\s]*|GF_SECURITY_SECRET_KEY\s*[=:]\s*["\'"'"']?[A-Za-z0-9+/=]{20,}["\'"'"']?|GF_SECURITY_ADMIN_PASSWORD\s*[=:]\s*["\'"'"']?[^"'\''\\s]{8,}["\'"'"']?|GF_SMTP_PASSWORD\s*[=:]\s*["\'"'"']?[^"'\''\\s]{6,}["\'"'"']?|GF_AUTH_[A-Z_]*CLIENT_SECRET\s*[=:]\s*["\'"'"']?[A-Za-z0-9_-]{20,}["\'"'"']?|GF_ENTERPRISE_LICENSE_TEXT\s*[=:]\s*["\'"'"']?[A-Za-z0-9+/=]{100,}["\'"'"']?)'
          
          # Prepare exclude arguments
          EXCLUDE_ARGS="--exclude-dir=.git --exclude-dir=node_modules --exclude-dir=venv --exclude-dir=__pycache__ --exclude-dir=.pytest_cache --exclude-dir=dist --exclude-dir=build --exclude-dir=vendor"
          
          # Run pattern scan with faster timeout
          if [[ "$FILES_TO_SCAN" == "." ]]; then
            RESULTS=$(timeout 60 grep -r -n -E "$GRAFANA_PATTERNS" . $EXCLUDE_ARGS 2>/dev/null || true)
          else
            RESULTS=$(timeout 30 grep -n -E "$GRAFANA_PATTERNS" $FILES_TO_SCAN 2>/dev/null || true)
          fi
          
          if [[ -n "$RESULTS" ]]; then
            echo "🚨 Grafana-specific secrets detected!"
            echo "$RESULTS" > custom-results.txt
            echo "secrets-found=true" >> $GITHUB_OUTPUT
          else
            echo "✅ No Grafana-specific secrets found"
            echo "secrets-found=false" >> $GITHUB_OUTPUT
          fi

      - name: Upload custom results artifact
        if: steps.patterns.outputs.secrets-found == 'true'
        uses: actions/upload-artifact@v4
        with:
          name: trufflehog-custom-results
          path: custom-results.txt
          retention-days: 30

  history-scan:
    needs: prepare-scan
    if: inputs.history-scan == 'true'
    runs-on: ubuntu-x64-small
    outputs:
      secrets-found: ${{ steps.history.outputs.secrets-found }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          persist-credentials: false
          fetch-depth: ${{ inputs.history-depth }}

      - name: Cache Trufflehog binary
        uses: actions/cache@v4
        with:
          path: /usr/local/bin/trufflehog
          key: ${{ needs.prepare-scan.outputs.cache-key }}

      - name: Install Trufflehog (if not cached)
        run: |
          if [ ! -f /usr/local/bin/trufflehog ]; then
            echo "Installing TruffleHog..."
            curl -sSfL https://raw.githubusercontent.com/trufflesecurity/trufflehog/0f58ae7c5036094a1e3e750d18772af92821b503/scripts/install.sh | sh -s -- -b /usr/local/bin
          else
            echo "Using cached TruffleHog binary"
          fi
          trufflehog --version

      - name: Run TruffleHog git history scan
        id: history
        env:
          HISTORY_DEPTH: ${{ inputs.history-depth }}
          EXTRA_ARGS: ${{ inputs.extra_args }}
        run: |
          echo "🕰️ Running TruffleHog git history scan..."
          echo "Scanning last $HISTORY_DEPTH commits"
          
          # Scan git history
          timeout 600 trufflehog git . \
            --json \
            --no-update \
            --results=verified,unverified \
            --no-verification \
            --concurrency=4 \
            --max-depth=$HISTORY_DEPTH \
            $EXTRA_ARGS > history-results.json || {
              EXIT_CODE=$?
              if [[ $EXIT_CODE -eq 124 ]]; then
                echo "⚠️ History scan timed out after 10 minutes"
                echo '{"timeout": true, "message": "History scan timed out"}' > history-results.json
              else
                echo "History scan completed with exit code: $EXIT_CODE"
              fi
            }
          
          # Check results
          if [[ -s history-results.json ]] && grep -q '"Raw"' history-results.json; then
            echo "🚨 Secrets found in git history!"
            SECRET_COUNT=$(grep -c '"Raw"' history-results.json)
            echo "Found $SECRET_COUNT potential secrets in commit history"
            echo "secrets-found=true" >> $GITHUB_OUTPUT
          else
            echo "✅ No secrets found in git history"
            echo "secrets-found=false" >> $GITHUB_OUTPUT
          fi

      - name: Upload history results artifact
        if: steps.history.outputs.secrets-found == 'true'
        uses: actions/upload-artifact@v4
        with:
          name: trufflehog-history-results
          path: history-results.json
          retention-days: 30

  summarize-results:
    needs: [prepare-scan, builtin-detectors, custom-patterns, history-scan]
    if: always() && (needs.prepare-scan.outputs.scan-count != '0' || inputs.history-scan == 'true')
    runs-on: ubuntu-x64-small
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          persist-credentials: false

      - name: Download artifacts
        uses: actions/download-artifact@v4
        with:
          path: ./artifacts
        continue-on-error: true

      - name: Generate security scan summary
        env:
          BUILTIN_FOUND: ${{ needs.builtin-detectors.outputs.secrets-found }}
          CUSTOM_FOUND: ${{ needs.custom-patterns.outputs.secrets-found }}
          HISTORY_FOUND: ${{ needs.history-scan.outputs.secrets-found }}
          FAIL_ON_SECRETS: ${{ inputs.fail-on-secrets }}
          HISTORY_ENABLED: ${{ inputs.history-scan }}
        run: |
          echo "📊 OPTIMIZED SECURITY SCAN SUMMARY"
          echo "=================================="
          echo ""
          
          # Determine overall status
          if [[ "$BUILTIN_FOUND" == "true" || "$CUSTOM_FOUND" == "true" || "$HISTORY_FOUND" == "true" ]]; then
            OVERALL_STATUS="❌ FAILED"
            echo "SECRETS_DETECTED=true" >> $GITHUB_ENV
          else
            OVERALL_STATUS="✅ PASSED"
            echo "SECRETS_DETECTED=false" >> $GITHUB_ENV
          fi
          
          echo "Overall Status: $OVERALL_STATUS"
          echo ""
          echo "Scan Results:"
          echo "- Built-in detectors: $([[ "$BUILTIN_FOUND" == "true" ]] && echo "❌ secrets found" || echo "✅ clean")"
          echo "- Custom patterns: $([[ "$CUSTOM_FOUND" == "true" ]] && echo "❌ secrets found" || echo "✅ clean")"
          if [[ "$HISTORY_ENABLED" == "true" ]]; then
            echo "- Git history: $([[ "$HISTORY_FOUND" == "true" ]] && echo "❌ secrets found" || echo "✅ clean")"
          fi
          echo ""

      - name: Comment on PR with optimized results
        if: github.event_name == 'pull_request'
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const fs = require('fs');
            let findings = [];
            let hasSecrets = false;
            
            // Check built-in results
            try {
              const builtinPath = './artifacts/trufflehog-builtin-results/builtin-results.json';
              if (fs.existsSync(builtinPath)) {
                const builtinData = fs.readFileSync(builtinPath, 'utf8')
                  .split('\n')
                  .filter(Boolean)
                  .slice(0, 5); // Limit to first 5 findings
                
                for (const line of builtinData) {
                  try {
                    const finding = JSON.parse(line);
                    if (finding.Raw) {
                      hasSecrets = true;
                      const fileName = finding.SourceMetadata?.Data?.Filesystem?.file || 'unknown';
                      const lineNum = finding.SourceMetadata?.Data?.Filesystem?.line || 'unknown';
                      findings.push(`📁 **${fileName}:${lineNum}** - ${finding.DetectorName}`);
                    }
                  } catch (e) { continue; }
                }
              }
            } catch (e) {
              console.log('No built-in results found');
            }
            
            // Check custom results
            try {
              const customPath = './artifacts/trufflehog-custom-results/custom-results.txt';
              if (fs.existsSync(customPath)) {
                const customData = fs.readFileSync(customPath, 'utf8').trim();
                if (customData) {
                  hasSecrets = true;
                  const lines = customData.split('\n').slice(0, 5);
                  findings.push('🔍 **Custom Grafana Patterns:**');
                  findings.push(...lines.map(line => `  ${line}`));
                }
              }
            } catch (e) {
              console.log('No custom results found');
            }
            
            // Create optimized comment
            const body = hasSecrets
              ? `🚨 **Security scan found ${findings.length} potential secret(s)**\n\n${findings.join('\n')}\n\n${findings.length >= 5 ? '_Showing first 5 findings. Download artifacts for complete results._' : ''}`
              : "✅ **Optimized security scan completed** - no secrets detected.";
            
            await github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body
            });

      - name: Final workflow status
        env:
          FAIL_ON_SECRETS: ${{ inputs.fail-on-secrets }}
        run: |
          if [[ "$SECRETS_DETECTED" == "true" && "$FAIL_ON_SECRETS" == "true" ]]; then
            echo "❌ Workflow failed: Secrets detected!"
            exit 1
          else
            echo "✅ Optimized workflow completed successfully"
          fi

  skip-scan:
    needs: prepare-scan
    if: needs.prepare-scan.outputs.scan-count == '0'
    runs-on: ubuntu-x64-small
    steps:
      - name: Skip scan notification
        run: |
          echo "⏭️ No relevant files changed - skipping security scan"
          echo "This is an optimization to avoid unnecessary scans."

      - name: Comment on PR about skipped scan
        if: github.event_name == 'pull_request'
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            await github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: "⏭️ **Security scan skipped** - no relevant files were changed in this PR."
            })
