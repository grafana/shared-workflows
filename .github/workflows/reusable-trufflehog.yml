name: Reusable Trufflehog Secret Scan

on:
  workflow_call:
    inputs:
      fail-on-secrets:
        description: "Fail the workflow if secrets are found"
        required: false
        default: "true"
        type: string
      extra_args:
        description: "Extra arguments to pass to Trufflehog"
        required: false
        default: ""
        type: string

jobs:
  trufflehog-scan:
    runs-on: ubuntu-x64-small
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          persist-credentials: false

      - name: Remove old Trufflehog (if present)
        run: |
          pip uninstall -y truffleHog || true
          pip uninstall -y trufflehog || true

      - name: Install Trufflehog (pinned to commit)
        run: |
          curl -sSfL https://raw.githubusercontent.com/trufflesecurity/trufflehog/0f58ae7c5036094a1e3e750d18772af92821b503/scripts/install.sh | sh -s -- -b /usr/local/bin
          trufflehog --version

      - name: Create Custom Regex Patterns
        run: |
          cat > custom-patterns.txt << 'EOF'
          # Grafana API Key - Pattern: eyJrIjoi[A-Za-z0-9+/=]{40,}
          eyJrIjoi[A-Za-z0-9+/=]{40,}

          # Grafana Service Account Token - Pattern: glsa_[A-Za-z0-9]{32}_[A-Fa-f0-9]{8}
          glsa_[A-Za-z0-9]{32}_[A-Fa-f0-9]{8}

          # Grafana Cloud API Token - Pattern: glc_[A-Za-z0-9+/]{32,}={0,2}
          glc_[A-Za-z0-9+/]{32,}={0,2}

          # GitHub Token - ghp_[A-Za-z0-9]{36}
          ghp_[A-Za-z0-9]{36}

          # Any API_KEY pattern with long values
          API_KEY\s*[=:]\s*["\']?[A-Za-z0-9+/=]{32,}["\']?

          # Grafana Database Connection Strings
          (mysql|postgres|postgresql)://[^:\s]+:[^@\s]+@[^/\s]+/[^?\s]*grafana[^?\s]*

          # Grafana Configuration Secrets - Fixed patterns
          GF_SECURITY_SECRET_KEY\s*[=:]\s*["\']?[A-Za-z0-9+/=]{20,}["\']?
          GF_SECURITY_ADMIN_PASSWORD\s*[=:]\s*["\']?[^"\'\\s]{8,}["\']?
          GF_SMTP_PASSWORD\s*[=:]\s*["\']?[^"\'\\s]{6,}["\']?
          GF_AUTH_[A-Z_]*CLIENT_SECRET\s*[=:]\s*["\']?[A-Za-z0-9_-]{20,}["\']?
          GF_ENTERPRISE_LICENSE_TEXT\s*[=:]\s*["\']?[A-Za-z0-9+/=]{100,}["\']?
          EOF

      - name: Setup Scan Configuration
        run: |
          # Define exclusions in one place
          cat > exclude_paths.txt << 'EOF'
          .git
          .github
          node_modules
          venv
          env
          __pycache__
          .pytest_cache
          .venv
          dist
          build
          trufflehog-.*\.json
          trufflehog-builtin-results\.json
          custom-.*\.txt
          custom-grafana-results\.txt
          exclude_paths\.txt
          custom-patterns\.txt
          grafana-secrets-flag\.txt
          scan_file_types\.txt
          EOF

          # Define file types to scan
          echo "*.go *.js *.ts *.json *.yaml *.yml *.env *.conf *.config *.ini *.toml *.txt *.md" > scan_file_types.txt

      - name: Run Trufflehog with Built-in Detectors
        env:
          EXTRA_ARGS: ${{ inputs.extra_args }}
        run: |
          echo "Running Trufflehog with built-in detectors..."

          echo "🔍 Debug info:"
          echo "Files to scan:"
          find . -name "*.env" -o -name "*.txt" -o -name "*.md" | head -10
          echo "Exclude paths:"
          cat exclude_paths.txt

          # Run with more aggressive settings to catch secrets
          trufflehog filesystem . \
            --json \
            --no-update \
            --results=verified,unverified,unknown \
            --exclude-paths=exclude_paths.txt \
            --no-verification \
            "$EXTRA_ARGS" > trufflehog-builtin-results.json || true

          echo "Raw Trufflehog output for debugging:"
          head -5 trufflehog-builtin-results.json || echo "No output file created"

          # Check if secrets were found
          if [ -s trufflehog-builtin-results.json ]; then
            echo "🚨 SECRETS DETECTED by Trufflehog built-in detectors!"
            echo "📄 Details:"
            jq -r '.[] | "FILE: \(.SourceMetadata.Data.Filesystem.file // "unknown") | LINE: \(.SourceMetadata.Data.Filesystem.line // "unknown") | DETECTOR: \(.DetectorName) | SECRET: \(.Raw[0:50])..."' trufflehog-builtin-results.json 2>/dev/null || cat trufflehog-builtin-results.json
          else
            echo "✅ No secrets found by Trufflehog built-in detectors"
          fi

      - name: Run Custom Grafana Pattern Scan
        run: |
          echo "Running additional scan for Grafana-specific patterns..."
          rm -f custom-grafana-results.txt grafana-secrets-flag.txt

          # Build grep exclusions from file
          exclude_args=()
          while IFS= read -r exclude_path; do
            if [[ ! "$exclude_path" =~ ^# ]] && [[ -n "${exclude_path// }" ]]; then
              if [[ "$exclude_path" == *".*"* ]]; then
                exclude_args+=("--exclude=${exclude_path//\\.*/.*}")
              else
                exclude_args+=("--exclude-dir=$exclude_path")
              fi
            fi
          done < exclude_paths.txt

          # Build include args from file types
          include_args=()
          for file_type in $(< scan_file_types.txt); do
            include_args+=("--include=$file_type")
          done

          secrets_found=false
          while IFS= read -r pattern || [ -n "$pattern" ]; do
            if [[ ! "$pattern" =~ ^# ]] && [[ -n "${pattern// }" ]]; then
              echo "🔍 Scanning for Grafana pattern: $pattern"
              results=$(grep -r -n -E "$pattern" . "${exclude_args[@]}" "${include_args[@]}" 2>/dev/null || true)
              if [ -n "$results" ]; then
                echo "🚨 GRAFANA SECRET DETECTED!"
                echo "Pattern: $pattern"
                echo "$results"
                echo "---"
                echo "$results" >> custom-grafana-results.txt
                secrets_found=true
              fi
            fi
          done < custom-patterns.txt

          if [ "$secrets_found" = false ]; then
            echo "✅ No Grafana-specific secrets found"
          else
            echo "SECRETS_FOUND" > grafana-secrets-flag.txt
          fi

      - name: Security Scan Summary
        env:
          FAIL_ON_SECRETS: ${{ inputs.fail-on-secrets }}
        run: |
          echo "📊 SECURITY SCAN SUMMARY"
          echo "======================="

          # Check scan results
          builtin_found=$([ -s trufflehog-builtin-results.json ] && echo "❌" || echo "✅")
          grafana_found=$([ -f grafana-secrets-flag.txt ] && echo "❌" || echo "✅")

          echo "$builtin_found Built-in detectors: $([ "$builtin_found" = "❌" ] && echo "secrets found" || echo "no secrets")"
          echo "$grafana_found Grafana patterns: $([ "$grafana_found" = "❌" ] && echo "secrets found" || echo "no secrets")"
          echo ""

          # Show detailed results
          echo "📄 DETAILED RESULTS:"
          echo "==================="
          echo "=== TRUFFLEHOG BUILT-IN RESULTS ==="
          cat trufflehog-builtin-results.json 2>/dev/null || echo "No built-in results"
          echo ""
          echo "=== CUSTOM GRAFANA PATTERN RESULTS ==="
          cat custom-grafana-results.txt 2>/dev/null || echo "No custom pattern results"
          echo ""

          # Store results for later use but don't fail yet
          if [[ "$builtin_found" == "❌" || "$grafana_found" == "❌" ]]; then
            echo "🚨 SCAN FAILED: Secrets detected! Please review and remove exposed secrets."
            echo "SECRETS_DETECTED=true" >> $GITHUB_ENV
          else
            echo "🎉 SCAN PASSED: No secrets detected!"
            echo "SECRETS_DETECTED=false" >> $GITHUB_ENV
          fi

      - name: Comment on PR with all Trufflehog findings (full JSON, clean format)
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            // Find PR number
            let prNumber = null;

            if (context.payload.pull_request) {
              prNumber = context.payload.pull_request.number;
            } else {
              // For push events, try to find PR by commit SHA
              try {
                const prs = await github.rest.pulls.list({
                  owner: context.repo.owner,
                  repo: context.repo.repo,
                  state: 'open'
                });

                const matchingPr = prs.data.find(pr => pr.head.sha === context.sha);
                if (matchingPr) {
                  prNumber = matchingPr.number;
                }
              } catch (e) {
                console.log('Could not search for PRs');
              }
            }

            if (!prNumber) {
              console.log('No PR found - skipping comment');
              return;
            }

            const fs = require('fs');
            let findings = [];
            try {
              const builtinResults = fs.readFileSync('trufflehog-builtin-results.json', 'utf8')
                .split('\n')
                .filter(Boolean);
              for (const line of builtinResults) {
                let finding;
                try {
                  finding = JSON.parse(line);
                } catch (e) {
                  continue;
                }
                if (finding.Raw) {
                  findings.push(
                    [
                      '---',
                      '**Trufflehog Finding:**',
                      '',
                      '```json',
                      JSON.stringify(finding, null, 2),
                      '```',
                      ''
                    ].join('\n')
                  );
                }
              }
              // Add custom Grafana findings
              try {
                const grafanaResults = fs.readFileSync('custom-grafana-results.txt', 'utf8');
                if (grafanaResults.trim()) {
                  findings.push(
                    [
                      '---',
                      '**Custom Grafana Pattern Findings:**',
                      '',
                      '```',
                      grafanaResults,
                      '```',
                      ''
                    ].join('\n')
                  );
                }
              } catch (e) {
                // No custom results file
              }
            } catch (e) {
              findings = ['(Could not parse Trufflehog report)'];
            }
            const body = findings.length
              ? `🚨 **Trufflehog found secrets in this PR!**\n\n${findings.join('\n')}`
              : "✅ Trufflehog ran and no secrets were found.";
            github.rest.issues.createComment({
              issue_number: prNumber,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body
            });

      - name: Fail workflow if secrets detected
        env:
          FAIL_ON_SECRETS: ${{ inputs.fail-on-secrets }}
        run: |
          if [ "$SECRETS_DETECTED" = "true" ] && [ "$FAIL_ON_SECRETS" = "true" ]; then
            echo "❌ Workflow failed: Secrets were detected!"
            exit 1
          else
            echo "✅ Workflow completed successfully"
          fi
