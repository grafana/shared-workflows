name: Reusable TruffleHog Secret Scan

on:
  workflow_call:
    inputs:
      fail-on-unverified:
        description: "Fail workflow on unverified secrets"
        required: false
        default: "false"
        type: string
      fail-on-verified:
        description: "Fail workflow on verified secrets"
        required: false
        default: "true"
        type: string
      scan-type:
        description: "Scan type: commits, filesystem, or both"
        required: false
        default: "both"
        type: string
      scan-scope:
        description: "Scan scope: changed-files, full-repo, or both"
        required: false
        default: "full-repo"
        type: string
      trufflehog-version:
        description: "TruffleHog version to use (optional override)"
        required: false
        default: ""
        type: string

permissions:
  contents: read
  pull-requests: write
  checks: write

env:
  TRUFFLEHOG_VERSION: "3.75.0" # ratchet:trufflesecurity/trufflehog@v3.75.0

jobs:
  trufflehog-scan:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@692973e3d937129bcbf40652eb9f2f61becf3332 # v4.1.7
        with:
          # Limited history to reduce credential exposure risk
          # 100 commits covers most recent development for security scanning
          fetch-depth: 100
          persist-credentials: false

      - name: Set TruffleHog version
        id: version
        env:
          INPUT_VERSION: ${{ inputs.trufflehog-version }}
          DEFAULT_VERSION: ${{ env.TRUFFLEHOG_VERSION }}
        run: |
          if [ -n "${INPUT_VERSION}" ]; then
            echo "version=${INPUT_VERSION}" >> "${GITHUB_OUTPUT}"
          else
            echo "version=v${DEFAULT_VERSION}" >> "${GITHUB_OUTPUT}"
          fi

      - name: Install TruffleHog
        run: |
          curl -sSfL https://raw.githubusercontent.com/trufflesecurity/trufflehog/main/scripts/install.sh \
            | sh -s -- -b /usr/local/bin "${{ steps.version.outputs.version }}"
          trufflehog --version

      - name: Create Grafana custom detectors config
        run: |
          cat > trufflehog-config.yml <<'EOF'
          detectors:
            - name: grafana-api-key
              keywords:
                - eyJrIjoi
              regex:
                api_key: 'eyJrIjoi[A-Za-z0-9+/=]{40,}'
            - name: grafana-service-account
              keywords:
                - glsa_
              regex:
                service_account: 'glsa_[A-Za-z0-9]{32}_[a-fA-F0-9]{8}'
            - name: grafana-cloud-token
              keywords:
                - glc_
              regex:
                cloud_token: 'glc_[A-Za-z0-9+/]{32,}={0,2}'
            - name: grafana-admin-password
              keywords:
                - GF_SECURITY_ADMIN_PASSWORD
              regex:
                admin_pass: 'GF_SECURITY_ADMIN_PASSWORD\s*[=:]\s*[^ \t\n]+'
            - name: grafana-smtp-password
              keywords:
                - GF_SMTP_PASSWORD
              regex:
                smtp_pass: 'GF_SMTP_PASSWORD\s*[=:]\s*[^ \t\n]+'
            - name: grafana-license
              keywords:
                - GF_ENTERPRISE_LICENSE_TEXT
              regex:
                license: 'GF_ENTERPRISE_LICENSE_TEXT\s*[=:]\s*[A-Za-z0-9+/=]{100,}'
          EOF

      - name: Get changed files for PR
        id: changed-files
        if: github.event_name == 'pull_request'
        env:
          BASE_SHA: ${{ github.event.pull_request.base.sha }}
          HEAD_SHA: ${{ github.sha }}
        run: |
          git diff --name-only "${BASE_SHA}..${HEAD_SHA}" > changed-files.txt
          echo "Changed files in this PR:"
          cat changed-files.txt || echo "No files changed"

      - name: Run TruffleHog Scan
        id: scan
        env:
          SCAN_TYPE: ${{ inputs.scan-type }}
          SCAN_SCOPE: ${{ inputs.scan-scope }}
          EVENT_NAME: ${{ github.event_name }}
        run: |
          set +e

          # Initialize result files
          echo "[]" > all-results.json

          # Full repository scanning
          if [[ "${SCAN_SCOPE}" == "full-repo" || "${SCAN_SCOPE}" == "both" ]]; then
            echo "Running full repository scan..."

            if [[ "${SCAN_TYPE}" == "commits" || "${SCAN_TYPE}" == "both" ]]; then
              echo "Scanning git commit history..."
              trufflehog git file://. \
                --json \
                --no-update \
                --config=trufflehog-config.yml \
                > commit-results.json || true
            fi

            if [[ "${SCAN_TYPE}" == "filesystem" || "${SCAN_TYPE}" == "both" ]]; then
              echo "Scanning current filesystem..."
              trufflehog filesystem . \
                --json \
                --no-update \
                --config=trufflehog-config.yml \
                > fs-results.json || true
            fi
          fi

          # Changed files scanning (PR only)
          if [[ "${EVENT_NAME}" == "pull_request" ]]; then
            if [[ "${SCAN_SCOPE}" == "changed-files" || "${SCAN_SCOPE}" == "both" ]]; then
              if [[ -s "changed-files.txt" ]]; then
                echo "Scanning changed files..."
                echo "[]" > changed-files-results.json
                while IFS= read -r file; do
                  if [[ -f "${file}" ]]; then
                    echo "Scanning: ${file}"
                    if trufflehog filesystem "${file}" \
                        --json \
                        --no-update \
                        --config=trufflehog-config.yml \
                        | jq -s 'add' changed-files-results.json - > tmp.json; then
                      mv tmp.json changed-files-results.json
                    fi
                  fi
                done < changed-files.txt
              else
                echo "No changed files to scan"
              fi
            fi
          fi

          # Merge all results
          echo "Merging scan results..."
          {
            for f in commit-results.json fs-results.json changed-files-results.json; do
              if [[ -s "${f}" ]]; then
                echo "Merging results from ${f}"
                jq -s 'add' all-results.json "${f}" > tmp.json && mv tmp.json all-results.json
              fi
            done
          }

          # Count results
          VERIFIED=$(jq '[.[] | select(.Verified==true)] | length' all-results.json)
          UNVERIFIED=$(jq '[.[] | select(.Verified==false)] | length' all-results.json)
          TOTAL=$((VERIFIED+UNVERIFIED))

          echo "Scan Summary:"
          echo "Verified secrets: ${VERIFIED}"
          echo "Unverified secrets: ${UNVERIFIED}"
          echo "Total findings: ${TOTAL}"

          {
            echo "verified=${VERIFIED}"
            echo "unverified=${UNVERIFIED}"
            echo "total=${TOTAL}"
          } >> "${GITHUB_OUTPUT}"

      - name: Comment on PR
        if: github.event_name == 'pull_request'
        uses: actions/github-script@60a0d83039c74a4aee543508d2ffcb1c3799cdea # v7.0.1
        with:
          github-token: ${{ github.token }}
          script: |
            const fs = require('fs');
            let results = [];
            try {
              const data = fs.readFileSync('all-results.json', 'utf8');
              results = JSON.parse(data);
            } catch(e) {
              console.log('No results file or parsing error:', e.message);
            }

            if (results.length === 0) {
              await github.rest.issues.createComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: context.issue.number,
                body: "**TruffleHog Scan Results**\n\nNo secrets detected in this PR."
              });
              return;
            }

            const findings = results.map(r => {
              const file = r.SourceMetadata?.Data?.Filesystem?.file || r.SourceMetadata?.Data?.Git?.file || "unknown";
              const line = r.SourceMetadata?.Data?.Filesystem?.line || r.SourceMetadata?.Data?.Git?.line || "?";
              const detector = r.DetectorName || "unknown";
              const raw = r.Raw || "";
              const masked = raw.length > 8 ? raw.slice(0,4) + "***" + raw.slice(-4) : "***";
              const status = r.Verified ? "**VERIFIED SECRET**" : "**Possible secret**";
              return `- ${status} (${detector}) at \`${file}:${line}\` â†’ \`${masked}\``;
            }).join("\n");

            const verified = results.filter(r => r.Verified).length;
            const unverified = results.filter(r => !r.Verified).length;

            const severity = verified > 0 ? "**CRITICAL**" : "**WARNING**";
            await github.rest.issues.createComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.issue.number,
              body: `${severity} **TruffleHog Scan Results**\n\n**Summary:** Found ${results.length} potential secrets (${verified} verified, ${unverified} unverified)\n\n${findings}\n\n${verified > 0 ? "**ACTION REQUIRED:** Rotate verified credentials immediately." : "**Review:** Check if unverified secrets are false positives."}`
            });

      - name: Create Check Status
        uses: actions/github-script@60a0d83039c74a4aee543508d2ffcb1c3799cdea # v7.0.1
        env:
          VERIFIED_COUNT: ${{ steps.scan.outputs.verified }}
          UNVERIFIED_COUNT: ${{ steps.scan.outputs.unverified }}
          TOTAL_COUNT: ${{ steps.scan.outputs.total }}
          FAIL_ON_VERIFIED: ${{ inputs.fail-on-verified }}
          FAIL_ON_UNVERIFIED: ${{ inputs.fail-on-unverified }}
          SCAN_TYPE: ${{ inputs.scan-type }}
          SCAN_SCOPE: ${{ inputs.scan-scope }}
          TRUFFLEHOG_VERSION: ${{ inputs.trufflehog-version }}
        with:
          github-token: ${{ github.token }}
          script: |
            const verified = parseInt(process.env.VERIFIED_COUNT || "0", 10);
            const unverified = parseInt(process.env.UNVERIFIED_COUNT || "0", 10);
            const total = parseInt(process.env.TOTAL_COUNT || "0", 10);

            const shouldFail = (
              (process.env.FAIL_ON_VERIFIED === "true" && verified > 0) ||
              (process.env.FAIL_ON_UNVERIFIED === "true" && unverified > 0)
            );

            const conclusion = shouldFail ? "failure" : "success";
            const title = total > 0
              ? `Found ${total} potential secrets (${verified} verified, ${unverified} unverified)`
              : "No secrets detected";

            await github.rest.checks.create({
              owner: context.repo.owner,
              repo: context.repo.repo,
              name: "TruffleHog Secret Scan",
              head_sha: context.sha,
              status: "completed",
              conclusion,
              output: {
                title,
                summary: "TruffleHog security scan completed",
                text: `Scan configuration:\n- Type: ${process.env.SCAN_TYPE}\n- Scope: ${process.env.SCAN_SCOPE}\n- Version: ${process.env.TRUFFLEHOG_VERSION || process.env.DEFAULT_VERSION}\n\nResults: ${title}`
              }
            });

      - name: Check and fail workflow if secrets found
        env:
          VERIFIED_COUNT: ${{ steps.scan.outputs.verified }}
          UNVERIFIED_COUNT: ${{ steps.scan.outputs.unverified }}
          FAIL_ON_VERIFIED: ${{ inputs.fail-on-verified }}
          FAIL_ON_UNVERIFIED: ${{ inputs.fail-on-unverified }}
        run: |
          SHOULD_FAIL=false

          if [[ "${FAIL_ON_VERIFIED}" == "true" && "${VERIFIED_COUNT}" != "0" ]]; then
            SHOULD_FAIL=true
          fi

          if [[ "${FAIL_ON_UNVERIFIED}" == "true" && "${UNVERIFIED_COUNT}" != "0" ]]; then
            SHOULD_FAIL=true
          fi

          if [[ "${SHOULD_FAIL}" == "true" ]]; then
            echo "Workflow failed due to secrets found"
            echo "Verified secrets: ${VERIFIED_COUNT}"
            echo "Unverified secrets: ${UNVERIFIED_COUNT}"
            exit 1
          else
            echo "No action needed - secrets found but within configured thresholds"
          fi
