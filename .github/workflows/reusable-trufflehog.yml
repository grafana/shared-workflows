name: Reusable TruffleHog Secret Scan

on:
  workflow_call:
    inputs:
      base-ref:
        description: "Base reference for commit range scanning (defaults to PR base or main)"
        required: false
        type: string
      head-ref:
        description: "Head reference for commit range scanning (defaults to current SHA)"
        required: false
        type: string
      custom-detectors-path:
        description: "Path to custom detector configuration file"
        required: false
        default: ""
        type: string
      exclude-paths:
        description: "Additional paths to exclude (newline separated)"
        required: false
        default: ""
        type: string
      fail-on-unverified:
        description: "Fail workflow on unverified secrets"
        required: false
        default: "false"
        type: string
      fail-on-verified:
        description: "Fail workflow on verified secrets"
        required: false
        default: "true"
        type: string
      trufflehog-version:
        description: "TruffleHog version to use"
        required: false
        default: ""
        type: string
      scan-type:
        description: "Scan type: commits, filesystem, or both"
        required: false
        default: "commits"
        type: string

permissions:
  contents: read
  pull-requests: write
  issues: write
  checks: write

defaults:
  run:
    shell: bash --noprofile --norc -eo pipefail

jobs:
  trufflehog-scan:
    runs-on: ubuntu-latest
    env:
      TRUFFLEHOG_VERSION: v3.75.0 # ratchet:trufflesecurity/trufflehog@v3.75.0
    outputs:
      secrets-found: ${{ steps.scan.outputs.secrets-found }}
      verified-count: ${{ steps.scan.outputs.verified-count }}
      unverified-count: ${{ steps.scan.outputs.unverified-count }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          token: ${{ github.token }}

      - name: Install TruffleHog
        id: install
        env:
          REQUESTED_REF: ${{ inputs.trufflehog-version }}
        run: |
          ref="${REQUESTED_REF:-$TRUFFLEHOG_VERSION}"

          if [[ -n "$ref" && "$ref" != "latest" ]]; then
            echo "Installing TruffleHog at ref '$ref'"
            curl -sSfL https://raw.githubusercontent.com/trufflesecurity/trufflehog/main/scripts/install.sh | sh -s -- -b /usr/local/bin "$ref"
          else
            echo "Installing latest TruffleHog release"
            curl -sSfL https://raw.githubusercontent.com/trufflesecurity/trufflehog/main/scripts/install.sh | sh -s -- -b /usr/local/bin
          fi

          trufflehog --version

      - name: Setup scan parameters
        id: setup
        run: |
          # Determine base and head refs
          if [[ "${{ github.event_name }}" == "pull_request" ]]; then
            BASE_REF="${{ inputs.base-ref || github.event.pull_request.base.sha }}"
            HEAD_REF="${{ inputs.head-ref || github.sha }}"
          else
            # For push events, scan the commits in the push
            BASE_REF="${{ inputs.base-ref || github.event.before }}"
            HEAD_REF="${{ inputs.head-ref || github.sha }}"
          fi
          
          echo "base-ref=${BASE_REF}" >> $GITHUB_OUTPUT
          echo "head-ref=${HEAD_REF}" >> $GITHUB_OUTPUT
          
          # Create allowlist file if it exists
          if [[ -f ".trufflehog-allowlist.yml" ]]; then
            echo "allowlist-exists=true" >> $GITHUB_OUTPUT
          else
            echo "allowlist-exists=false" >> $GITHUB_OUTPUT
          fi
          
          # Setup exclude patterns
          cat > exclude-patterns.txt << 'EOF'
          .git/
          node_modules/
          vendor/
          dist/
          build/
          __pycache__/
          .pytest_cache/
          .venv/
          venv/
          *.min.js
          *.min.css
          *.map
          *.lock
          *.sum
          go.sum
          package-lock.json
          yarn.lock
          Pipfile.lock
          poetry.lock
          EOF
          
          # Add custom exclude paths
          if [[ -n "${{ inputs.exclude-paths }}" ]]; then
            echo "${{ inputs.exclude-paths }}" >> exclude-patterns.txt
          fi

      - name: Setup custom detectors
        id: custom-detectors
        run: |
          # Create custom detectors configuration
          cat > custom-detectors.yml << 'EOF'
          detectors:
            - name: grafana-api-key
              keywords:
                - "eyJrIjoi"
              regex:
                grafana_api_key: 'eyJrIjoi[A-Za-z0-9+/=]{40,}'
            - name: grafana-service-account
              keywords:
                - "glsa_"
              regex:
                grafana_service_account: 'glsa_[A-Za-z0-9]{32}_[A-Fa-f0-9]{8}'
            - name: grafana-cloud-token
              keywords:
                - "glc_"
              regex:
                grafana_cloud_token: 'glc_[A-Za-z0-9+/]{32,}={0,2}'
            - name: grafana-config-secrets
              keywords:
                - "GF_SECURITY_SECRET_KEY"
                - "GF_SECURITY_ADMIN_PASSWORD"
                - "GF_SMTP_PASSWORD"
                - "GF_AUTH_"
                - "GF_ENTERPRISE_LICENSE"
              regex:
                gf_secret_key: 'GF_SECURITY_SECRET_KEY\s*[=:]\s*["\'"'"']?[A-Za-z0-9+/=]{20,}["\'"'"']?'
                gf_admin_password: 'GF_SECURITY_ADMIN_PASSWORD\s*[=:]\s*["\'"'"']?[^"'\''\\s]{8,}["\'"'"']?'
                gf_smtp_password: 'GF_SMTP_PASSWORD\s*[=:]\s*["\'"'"']?[^"'\''\\s]{6,}["\'"'"']?'
                gf_client_secret: 'GF_AUTH_[A-Z_]*CLIENT_SECRET\s*[=:]\s*["\'"'"']?[A-Za-z0-9_-]{20,}["\'"'"']?'
                gf_license: 'GF_ENTERPRISE_LICENSE_TEXT\s*[=:]\s*["\'"'"']?[A-Za-z0-9+/=]{100,}["\'"'"']?'
            - name: database-urls
              keywords:
                - "mysql://"
                - "postgres://"
                - "postgresql://"
              regex:
                database_url: '(mysql|postgres|postgresql)://[^:\s]+:[^@\s]+@[^/\s]+/[^?\s]*'
          EOF
          
          # Use custom detectors file if provided
          if [[ -n "${{ inputs.custom-detectors-path }}" ]] && [[ -f "${{ inputs.custom-detectors-path }}" ]]; then
            cp "${{ inputs.custom-detectors-path }}" custom-detectors.yml
          fi

      - name: Run TruffleHog scan
        id: scan
        run: |
          set +e  # Don't exit on trufflehog findings
          
          SCAN_ARGS=""
          VERIFIED_COUNT=0
          UNVERIFIED_COUNT=0
          SECRETS_FOUND=false
          
          # Add verification flag
          SCAN_ARGS="$SCAN_ARGS --results=verified,unverified"
          
          # Add allowlist if exists
          if [[ "${{ steps.setup.outputs.allowlist-exists }}" == "true" ]]; then
            SCAN_ARGS="$SCAN_ARGS --allow-verification-overlap --config=.trufflehog-allowlist.yml"
          fi
          
          # Add exclude patterns
          SCAN_ARGS="$SCAN_ARGS --exclude-paths=exclude-patterns.txt"
          
          # Add custom detectors
          SCAN_ARGS="$SCAN_ARGS --custom-detectors=custom-detectors.yml"
          
          echo "Starting TruffleHog scan"
          echo "Base ref: ${{ steps.setup.outputs.base-ref }}"
          echo "Head ref: ${{ steps.setup.outputs.head-ref }}"
          echo "Scan type: ${{ inputs.scan-type }}"
          
          # Run appropriate scan type
          if [[ "${{ inputs.scan-type }}" == "commits" ]] || [[ "${{ inputs.scan-type }}" == "both" ]]; then
            echo "Scanning commits"
            trufflehog git file://. \
              --since-commit=${{ steps.setup.outputs.base-ref }} \
              --branch=${{ steps.setup.outputs.head-ref }} \
              --json \
              --no-update \
              $SCAN_ARGS > commits-results.json || true
          fi
          
          if [[ "${{ inputs.scan-type }}" == "filesystem" ]] || [[ "${{ inputs.scan-type }}" == "both" ]]; then
            echo "Scanning filesystem"
            trufflehog filesystem . \
              --json \
              --no-update \
              $SCAN_ARGS > filesystem-results.json || true
          fi
          
          # Process results
          for result_file in commits-results.json filesystem-results.json; do
            if [[ -f "$result_file" ]] && [[ -s "$result_file" ]]; then
              echo "📊 Processing $result_file..."
              
              # Count verified and unverified secrets
              VERIFIED_IN_FILE=$(jq -r 'select(.Verified == true) | .DetectorName' "$result_file" 2>/dev/null | wc -l || echo "0")
              UNVERIFIED_IN_FILE=$(jq -r 'select(.Verified == false) | .DetectorName' "$result_file" 2>/dev/null | wc -l || echo "0")
              
              VERIFIED_COUNT=$((VERIFIED_COUNT + VERIFIED_IN_FILE))
              UNVERIFIED_COUNT=$((UNVERIFIED_COUNT + UNVERIFIED_IN_FILE))
              
              if [[ $VERIFIED_IN_FILE -gt 0 ]] || [[ $UNVERIFIED_IN_FILE -gt 0 ]]; then
                SECRETS_FOUND=true
              fi
            fi
          done
          
          echo "verified-count=$VERIFIED_COUNT" >> $GITHUB_OUTPUT
          echo "unverified-count=$UNVERIFIED_COUNT" >> $GITHUB_OUTPUT
          echo "secrets-found=$SECRETS_FOUND" >> $GITHUB_OUTPUT
          
          echo "Scan summary"
          echo "  verified: $VERIFIED_COUNT"
          echo "  unverified: $UNVERIFIED_COUNT"
          echo "  total: $((VERIFIED_COUNT + UNVERIFIED_COUNT))"
          
          # Determine if workflow should fail
          SHOULD_FAIL=false
          if [[ "${{ inputs.fail-on-verified }}" == "true" ]] && [[ $VERIFIED_COUNT -gt 0 ]]; then
            SHOULD_FAIL=true
            echo "Workflow marked as failed because verified secrets were found"
          fi
          if [[ "${{ inputs.fail-on-unverified }}" == "true" ]] && [[ $UNVERIFIED_COUNT -gt 0 ]]; then
            SHOULD_FAIL=true
            echo "Workflow marked as failed because unverified secrets were found"
          fi
          
          # Set exit code for later steps
          if [[ "$SHOULD_FAIL" == "true" ]]; then
            echo "workflow-should-fail=true" >> $GITHUB_OUTPUT
          else
            echo "workflow-should-fail=false" >> $GITHUB_OUTPUT
          fi

      - name: Process scan results for comments
        id: process-results
        if: always()
        run: |
          # Combine and process all results
          echo "[]" > all-results.json
          
          for result_file in commits-results.json filesystem-results.json; do
            if [[ -f "$result_file" ]] && [[ -s "$result_file" ]]; then
              # Merge results
              jq -s 'add' all-results.json "$result_file" > temp-results.json
              mv temp-results.json all-results.json
            fi
          done
          
          # Create summary for comments
          python3 << 'EOF'
          import json
          import os
          from collections import defaultdict
          
          try:
              with open('all-results.json', 'r') as f:
                  results = json.load(f)
          except:
              results = []
          
          # Group findings by file and line
          findings_by_file = defaultdict(list)
          summary_stats = {
              'verified': 0,
              'unverified': 0,
              'total': 0,
              'detectors': set()
          }
          
          for finding in results:
              if not finding:
                  continue
                  
              file_path = finding.get('SourceMetadata', {}).get('Data', {}).get('Filesystem', {}).get('file', 'unknown')
              line_num = finding.get('SourceMetadata', {}).get('Data', {}).get('Filesystem', {}).get('line', 0)
              
              is_verified = finding.get('Verified', False)
              detector = finding.get('DetectorName', 'unknown')
              raw_secret = finding.get('Raw', '')
              
              # Mask the secret for display
              if len(raw_secret) > 8:
                  masked_secret = raw_secret[:4] + '***' + raw_secret[-4:]
              else:
                  masked_secret = '***'
              
              finding_info = {
                  'line': line_num,
                  'detector': detector,
                  'verified': is_verified,
                  'masked_secret': masked_secret,
                  'severity': 'HIGH' if is_verified else 'MEDIUM'
              }
              
              findings_by_file[file_path].append(finding_info)
              
              # Update summary
              if is_verified:
                  summary_stats['verified'] += 1
              else:
                  summary_stats['unverified'] += 1
              summary_stats['total'] += 1
              summary_stats['detectors'].add(detector)
          
          # Write summary
          summary_stats['detectors'] = list(summary_stats['detectors'])
          with open('scan-summary.json', 'w') as f:
              json.dump(summary_stats, f, indent=2)
          
          # Write findings by file
          with open('findings-by-file.json', 'w') as f:
              json.dump(dict(findings_by_file), f, indent=2)
          
          EOF

      - name: Post PR review comments
        if: github.event_name == 'pull_request' && steps.scan.outputs.secrets-found == 'true'
        uses: actions/github-script@v7
        with:
          github-token: ${{ github.token }}
          script: |
            const fs = require('fs');
            
            // Read findings
            let findingsByFile = {};
            try {
              findingsByFile = JSON.parse(fs.readFileSync('findings-by-file.json', 'utf8'));
            } catch (e) {
              console.log('No findings file found');
              return;
            }
            
            // Post review comments for each finding
            for (const [filePath, findings] of Object.entries(findingsByFile)) {
              for (const finding of findings) {
                const severity = finding.verified ? 'Verified secret' : 'Possible secret';
                const actionLine = finding.verified
                  ? 'Remove the credential from version control and rotate it.'
                  : 'Review this value and confirm whether it is a credential.';

                const body = `${severity} detected by TruffleHog.

Detector: ${finding.detector}
Line: ${finding.line}
Masked value: \`${finding.masked_secret}\`

Next steps:
- ${actionLine}
- Suppress confirmed false positives in \`.trufflehog-allowlist.yml\`.
- Prefer environment variables or a secrets manager for sensitive values.`;

                try {
                  await github.rest.pulls.createReviewComment({
                    owner: context.repo.owner,
                    repo: context.repo.repo,
                    pull_number: context.issue.number,
                    commit_id: context.payload.pull_request.head.sha,
                    path: filePath,
                    line: finding.line,
                    body: body
                  });
                } catch (error) {
                  console.log(`Failed to comment on ${filePath}:${finding.line} - ${error.message}`);
                  // Fallback to regular comment if review comment fails
                  await github.rest.issues.createComment({
                    owner: context.repo.owner,
                    repo: context.repo.repo,
                    issue_number: context.issue.number,
                    body: `**Secret detected in ${filePath}:${finding.line}**\n\n${body}`
                  });
                }
              }
            }

      - name: Post PR summary comment
        if: github.event_name == 'pull_request'
        uses: actions/github-script@v7
        with:
          github-token: ${{ github.token }}
          script: |
            const fs = require('fs');

            let summary = {verified: 0, unverified: 0, total: 0, detectors: []};
            try {
              summary = JSON.parse(fs.readFileSync('scan-summary.json', 'utf8'));
            } catch (e) {
              console.log('No summary file found');
            }

            const hasSecrets = summary.total > 0;
            let body = 'TruffleHog scan completed.\n\n';

            if (hasSecrets) {
              body += `Findings:\n- verified: ${summary.verified}\n- unverified: ${summary.unverified}\n- detectors: ${summary.detectors.join(', ') || 'n/a'}\n\n`;
              body += 'Review the inline comments for affected files. Confirm false positives in `.trufflehog-allowlist.yml` and rotate credentials where needed.';
            } else {
              body += 'No secrets detected in this change set.';
            }

            const comments = await github.rest.issues.listComments({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.issue.number
            });

            const existingComment = comments.data.find(comment =>
              comment.body.startsWith('TruffleHog scan completed.') &&
              comment.user.type === 'Bot'
            );

            if (existingComment) {
              await github.rest.issues.updateComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                comment_id: existingComment.id,
                body
              });
            } else {
              await github.rest.issues.createComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: context.issue.number,
                body
              });
            }

      - name: Upload scan artifacts
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: trufflehog-scan-results
          path: |
            commits-results.json
            filesystem-results.json
            all-results.json
            scan-summary.json
            findings-by-file.json
            custom-detectors.yml
            exclude-patterns.txt
          retention-days: 30

      - name: Create check run
        if: always()
        uses: actions/github-script@v7
        with:
          github-token: ${{ github.token }}
          script: |
            const fs = require('fs');
            
            let summary = {verified: 0, unverified: 0, total: 0};
            try {
              summary = JSON.parse(fs.readFileSync('scan-summary.json', 'utf8'));
            } catch (e) {
              console.log('No summary file found');
            }
            
            const conclusion = summary.total > 0 ? 'failure' : 'success';
            const title = summary.total > 0 ? 
              `Found ${summary.total} potential secrets (${summary.verified} verified)` :
              'No secrets detected';
            
            await github.rest.checks.create({
              owner: context.repo.owner,
              repo: context.repo.repo,
              name: 'TruffleHog Secret Scan',
              head_sha: context.sha,
              status: 'completed',
              conclusion: conclusion,
              output: {
                title: title,
                summary: `TruffleHog scanned for secrets and found ${summary.total} potential issues.`,
                text: summary.total > 0 ? 
                  `Verified secrets: ${summary.verified}\nUnverified secrets: ${summary.unverified}` :
                  'No secrets were detected in this scan.'
              }
            });

      - name: Fail workflow if needed
        if: steps.scan.outputs.workflow-should-fail == 'true'
        run: |
          echo "❌ Workflow failed due to detected secrets"
          echo "Verified secrets: ${{ steps.scan.outputs.verified-count }}"
          echo "Unverified secrets: ${{ steps.scan.outputs.unverified-count }}"
          exit 1