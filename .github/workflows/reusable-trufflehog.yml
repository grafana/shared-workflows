name: Reusable Trufflehog Secret Scan

on:
  workflow_call:
    inputs:
      fail-on-secrets:
        description: "Fail the workflow if secrets are found"
        required: false
        default: "true"
        type: string
      extra_args:
        description: "Extra arguments to pass to Trufflehog"
        required: false
        default: ""
        type: string

jobs:
  trufflehog-scan:
    runs-on: ubuntu-x64-small
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          persist-credentials: false

      - name: Remove old Trufflehog (if present)
        run: |
          pip uninstall -y truffleHog || true
          pip uninstall -y trufflehog || true

      - name: Install Trufflehog (pinned to commit)
        run: |
          curl -sSfL https://raw.githubusercontent.com/trufflesecurity/trufflehog/0f58ae7c5036094a1e3e750d18772af92821b503/scripts/install.sh | sh -s -- -b /usr/local/bin
          trufflehog --version

      - name: Create Trufflehog Config
        run: |
          cat > trufflehog-config.yaml << 'EOF'
          detectors:
            - name: GrafanaAPIKey
              keywords:
                - grafana
                - eyJrIjoi
              regex:
                grafanaAPIKey: 'eyJrIjoi[A-Za-z0-9]{70,}={0,2}'
              verify:
                - endpoint: https://grafana.com/api/
                  unsafe: false
                  headers:
                    - "Authorization: Bearer {}"

            - name: GrafanaServiceAccountToken
              keywords:
                - grafana
                - glsa_
              regex:
                serviceAccountToken: 'glsa_[A-Za-z0-9]{32}_[A-Fa-f0-9]{8}'
              verify:
                - endpoint: https://grafana.com/api/
                  unsafe: false
                  headers:
                    - "Authorization: Bearer {}"

            - name: GrafanaCloudToken
              keywords:
                - grafana
                - glc_
              regex:
                cloudToken: 'glc_[A-Za-z0-9+/]{32,}={0,2}'
              verify:
                - endpoint: https://grafana.com/api/
                  unsafe: false
                  headers:
                    - "Authorization: Bearer {}"

            - name: GrafanaDatabaseConnection
              keywords:
                - grafana
                - mysql
                - postgres
                - postgresql
              regex:
                dbConnection: '(mysql|postgres|postgresql)://[^:\s]+:[^@\s]+@[^/\s]+/[^?\s]*grafana[^?\s]*'

            - name: GrafanaConfigSecrets
              keywords:
                - GF_SECURITY
                - GF_SMTP
                - GF_AUTH
                - GF_ENTERPRISE
              regex:
                secretKey: 'GF_SECURITY_SECRET_KEY\s*[=:]\s*["\']?([A-Za-z0-9+/]{32,}={0,2})["\']?'
                adminPassword: 'GF_SECURITY_ADMIN_PASSWORD\s*[=:]\s*["\']?([^"\'\\s]{8,})["\']?'
                smtpPassword: 'GF_SMTP_PASSWORD\s*[=:]\s*["\']?([^"\'\\s]{6,})["\']?'
                oauthSecret: 'GF_AUTH_[A-Z_]*CLIENT_SECRET\s*[=:]\s*["\']?([A-Za-z0-9_-]{20,})["\']?'
                licenseKey: 'GF_ENTERPRISE_LICENSE_TEXT\s*[=:]\s*["\']?([A-Za-z0-9+/=]{100,})["\']?'
          EOF

      - name: Run Trufflehog
        env:
          EXTRA_ARGS: ${{ inputs.extra_args }}
        run: |
          trufflehog filesystem . \
            --json \
            --no-update \
            --results=verified,unknown \
            --fail \
            --exclude-paths=.git,.github,node_modules,venv,env \
            --config=trufflehog-config.yaml \
            "$EXTRA_ARGS" \
            > trufflehog-results.json || true

      - name: Debug Trufflehog output
        run: cat trufflehog-results.json || echo "No trufflehog-results.json found"

      - name: Comment on PR with all Trufflehog findings (full JSON, clean format)
        if: ${{ github.event.pull_request != null }}
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const fs = require('fs');
            let findings = [];
            try {
              const lines = fs.readFileSync('trufflehog-results.json', 'utf8')
                .split('\n')
                .filter(Boolean);
              for (const line of lines) {
                let finding;
                try {
                  finding = JSON.parse(line);
                } catch (e) {
                  continue;
                }
                if (finding.Raw) {
                  findings.push(
                    [
                      '---',
                      '**Trufflehog Finding:**',
                      '',
                      '```json',
                      JSON.stringify(finding, null, 2),
                      '```',
                      ''
                    ].join('\n')
                  );
                }
              }
            } catch (e) {
              findings = ['(Could not parse Trufflehog report)'];
            }
            const body = findings.length
              ? `ðŸš¨ **Trufflehog found secrets in this PR!**\n\n${findings.join('\n')}`
              : "âœ… Trufflehog ran and no secrets were found.";
            github.rest.issues.createComment({
              issue_number: context.payload.pull_request.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body
            });

      - name: Fail if any secrets found
        if: ${{ inputs.fail-on-secrets == 'true' && hashFiles('trufflehog-results.json') != '' }}
        run: |
          if grep -q '"Raw":' trufflehog-results.json; then
            echo "Secrets found! Failing the workflow."
            exit 1
          fi
