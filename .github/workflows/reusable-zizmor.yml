name: zizmor (reusable)

on:
  workflow_call:
    inputs:
      min-severity:
        description: "Only show results at or above this severity [possible values: unknown, informational, low, medium, high]"
        required: false
        type: string
        default: "low"

      min-confidence:
        description: "Only show results at or above this confidence level [possible values: unknown, low, medium, high]"
        required: false
        type: string
        default: "low"

      fail-severity:
        description: "Fail the build if any result is at or above this severity [possible values: never, any, informational, low, medium, high]"
        required: false
        type: string
        default: "high"

      runs-on:
        description: "The runner to use for jobs"
        required: false
        type: string
        default: "ubuntu-latest"

      always-use-default-config:
        description: Whether to always use the default configuration.
        required: false
        type: boolean
        default: false

      github-token:
        description: "The GitHub token to use for the job"
        required: false
        type: string

permissions: {}

jobs:
  # The default config file is in `.github/zizmor.yml`. When we're called by a
  # remote repository, this file won't be available - in reusable workflows the
  # workflow's repo isn't checked out. In order to make something like:
  #
  # ```yaml
  # uses: grafana/shared-workflows/.github/workflows/reusable-zizmor.yml@<SHA>`
  # ```
  #
  # work, we need to figure out the reference we were called at, and then fetch
  # the file from there. This `job-workflow-ref` job does the first part of
  # that. The way to do that is a little bit indirect. You can ask GitHub's OIDC
  # endpoint for a token, and fetch the info out of the `job_workflow_ref`claim.
  # This runs in a separate job because the main job doesn't need `id-token:
  # write` permissons, and this one doesn't need anything but that. We can keep
  # the permissions as minimal as possible this way.
  job-workflow-ref:
    permissions:
      id-token: write

    runs-on: ${{ inputs.runs-on }}

    outputs:
      owner: ${{ steps.get-job-workflow-ref.outputs.owner }}
      repo: ${{ steps.get-job-workflow-ref.outputs.repo }}
      sha: ${{ steps.get-job-workflow-ref.outputs.sha }}

    steps:
      - id: setup-node
        name: Setup node.js
        uses: actions/setup-node@49933ea5288caeca8642d1e84afbd3f7d6820020 # v4.4.0
        with:
          node-version: "20.x"

      - id: install-jose
        name: Install `jose` library for JWT verification
        env:
          # Keep this updated in a simpler way than needing a full package.json.
          # renovate: datasource=npm depName=jose
          JOSE_VERSION: 6.0.10
        run: npm install "jose@${JOSE_VERSION}"

      - id: get-job-workflow-ref
        name: Fetch the job_workflow_ref of this run
        uses: actions/github-script@60a0d83039c74a4aee543508d2ffcb1c3799cdea # v7.0.1
        with:
          script: |
            const { jwtVerify, createRemoteJWKSet } = require('jose');

            async function retrieveIdToken(audience) {
              core.debug(`Attempting to retrieve ID token with audience: ${audience}...`);

              const idToken = await core.getIDToken(audience);
              if (idToken === undefined) {
                throw new Error('Failed to retrieve ID token');
              }

              core.debug('ID token retrieved successfully.');
              return idToken;
            }

            async function verifyToken(idToken, audience) {
              const JWKS = createRemoteJWKSet(
                new URL('https://token.actions.githubusercontent.com/.well-known/jwks')
              );

              return await jwtVerify(
                idToken,
                JWKS,
                {
                  issuer: 'https://token.actions.githubusercontent.com',
                  audience: audience,
                }
              );
            }

            function extractWorkflowRef(payload) {
              const { job_workflow_ref } = payload;
              if (job_workflow_ref === undefined) {
                throw new Error(`Claim 'job_workflow_ref' not found in ID token payload.\n\n${JSON.stringify(payload, null, 2)}`);
              }

              core.debug(`Found job_workflow_ref claim: ${job_workflow_ref}`);
              return job_workflow_ref;
            }

            function parseWorkflowRef(job_workflow_ref) {
              // Format: owner/repo/.github/workflows/workflow.yml@ref
              const regex = /^(?<owner>[^/]+)\/(?<repo>[^/]+)\/.+@(?<ref>.+)$/;
              const match = job_workflow_ref.match(regex);

              if (!match || !match.groups) {
                throw new Error(`Failed to parse owner, repo and ref from \`job_workflow_ref\` claim \`${job_workflow_ref}\``);
              }

              const { owner, repo, ref } = match.groups;

              return { owner, repo, ref };
            }

            /**
             * Derefence the input ref to a SHA. This is because we cache the
             * file, and refs can be updated to point to other objects, so they
             * aren't suitable cache keys.
             */
            async function getRefSha(owner, repo, ref) {
              if (!ref.startsWith('refs/')) {
                return ref;
              }

              core.debug(`Getting SHA for ref: ${ref} in ${owner}/${repo}`);

              // Remove `refs/` from the start, as the API expects a reference
              // without it.
              ref = ref.substring(5);

              try {
                const response = await github.rest.git.getRef({
                  owner,
                  repo,
                  ref,
                });

                const sha = response.data.object.sha;
                core.debug(`Found SHA: ${sha} for ref: ${ref}`);

                return sha;
              } catch (error) {
                throw new Error(`Failed to resolve ref ${ref} to a SHA: ${error.message}`);
              }
            }

            const AUDIENCE = 'zizmor-job-workflow-ref';

            try {
              const idToken = await retrieveIdToken(AUDIENCE);

              const { payload } = await verifyToken(idToken, AUDIENCE);

              const job_workflow_ref = extractWorkflowRef(payload);

              const { owner, repo, ref } = parseWorkflowRef(job_workflow_ref);
              const sha = await getRefSha(owner, repo, ref);

              console.log(`This run is: owner: \`${owner}\`, repo: \`${repo}\`, ref: \`${ref}\`, sha: ${sha}`);

              core.setOutput('owner', owner);
              core.setOutput('repo', repo);
              core.setOutput('sha', sha);
            } catch (error) {
              core.setFailed(`Script failed: ${error.message}`);

              if (error.stack) {
                console.error(`Stack trace: ${error.stack}`);
              }
            }

  analysis:
    needs: job-workflow-ref

    name: Generate and upload zizmor results ðŸŒˆ

    runs-on: ${{ inputs.runs-on }}

    permissions:
      actions: read
      contents: read

      # comment with the results
      pull-requests: write
      # upload the results to code-scanning dashboard.
      security-events: write

    env:
      MIN_SEVERITY: ${{ inputs.min-severity }}
      MIN_CONFIDENCE: ${{ inputs.min-confidence }}
      GH_TOKEN: ${{ inputs.github-token || github.token }}
      # renovate: datasource=pypi depName=zizmor
      ZIZMOR_VERSION: 1.6.0

    steps:
      - name: Harden the runner (Audit all outbound calls)
        if: ${{ ! github.event.repository.private }}
        uses: step-security/harden-runner@0634a2670c59f64b4a01f0f96f84700a4088b9f0 # v2.12.0
        with:
          egress-policy: audit

      - name: Checkout code
        uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4.2.2
        with:
          persist-credentials: false

      - name: Restore config from cache
        id: cache-config
        uses: actions/cache@5a3ec84eff668545956fd18022155c47e93e2684 # v4.2.3
        with:
          path: ${{ runner.temp }}/zizmor.yml
          key: zizmor-config-${{ needs.job-workflow-ref.outputs.repo }}-${{ needs.job-workflow-ref.outputs.sha }}

      - name: Fetch Zizmor Config
        id: fetch-config
        if: steps.cache-config.outputs.cache-hit != 'true'
        uses: actions/github-script@60a0d83039c74a4aee543508d2ffcb1c3799cdea # v7.0.1
        env:
          OWNER: ${{ needs.job-workflow-ref.outputs.owner }}
          REPO: ${{ needs.job-workflow-ref.outputs.repo }}
          SHA: ${{ needs.job-workflow-ref.outputs.sha }}
        with:
          script: |
            const fs = require('fs').promises;
            const path = require('path');

            const owner = process.env.OWNER;
            const repo = process.env.REPO;
            const sha = process.env.SHA;

            if (!owner || !repo || !sha) {
              core.warning('Missing owner, repo or sha. Did the job-workflow-ref step run OK?');

              return;
            }

            console.log(`Fetching config from ${owner}/${repo}@${sha}`);

            try {
              const response = await github.rest.repos.getContent({
                owner,
                repo,
                path: '.github/zizmor.yml',
                ref: sha
              });

              // File exists, decode content from base64
              if (response.status !== 200 || response.data.content === undefined) {
                throw new Error(`received unexpected response: ${response.status}`);
              }

              const contentBase64 = response.data.content;
              const configContent = Buffer.from(contentBase64, 'base64').toString('utf8');

              console.log('Config file successfully fetched from GitHub. Contents:');
              console.log(configContent);

              const destinationPath = path.join(process.env.RUNNER_TEMP, 'zizmor.yml');
              await fs.writeFile(destinationPath, configContent);
            } catch (err) {
              // Don't fail the workflow on errors - we just won't have a
              // default config.

              if ('status' in err && err.status === 404) {
                core.warning('Config file not found in repository');
                return;
              }

              core.error(`Error fetching config: ${err.message}`);
              if (err.stack) {
                core.error(`Stack trace: ${err.stack}`);
              }

              return;
            }

      - name: Set up Zizmor configuration
        id: setup-config
        env:
          FORCE_DEFAULT_CONFIG: ${{ inputs.always-use-default-config && 'true' || '' }}
        shell: sh
        run: |
          if [ -z "${FORCE_DEFAULT_CONFIG}" ]; then
            echo "Checking for user-provided zizmor configuration..."
            if [ -f "zizmor.yml" ]; then
              # No action needed, zizmor will find it
              echo "Using zizmor.yml found in repository root."
              exit 0
            fi

            if [ -f ".github/zizmor.yml" ]; then
              # No action needed, zizmor will find it
              echo "Using .github/zizmor.yml found in repository."
              exit 0
            fi

            echo "No user-provided zizmor.yml found in root or .github/. Using default zizmor config."
          else
            echo "always-use-default-config is set. Using default config."
          fi

          ZIZMOR_CONFIG="${{ runner.temp }}/zizmor.yml"
          echo "zizmor-config=${ZIZMOR_CONFIG}" | tee -a "${GITHUB_OUTPUT}"

      - name: Setup UV
        uses: astral-sh/setup-uv@6b9c6063abd6010835644d4c2e1bef4cf5cd0fca # v6.0.1
        with:
          enable-cache: true
          activate-environment: true
          cache-suffix: ${{ env.ZIZMOR_VERSION }}
          cache-dependency-glob: ""

      - name: Install Zizmor
        shell: bash
        run: |
          echo "Installing Zizmor ${ZIZMOR_VERSION}"
          uv pip install --no-cache-dir "zizmor==${ZIZMOR_VERSION}"

      - name: Zizmor cache
        uses: actions/cache@5a3ec84eff668545956fd18022155c47e93e2684 # v4
        with:
          path: ${{ runner.temp }}/.cache/zizmor
          key: zizmor-${{ runner.os }}-${{ runner.arch }}

      - name: Run zizmor
        env:
          ZIZMOR_CONFIG: ${{ steps.setup-config.outputs.zizmor-config }}
          ZIZMOR_CACHE_DIR: ${{ runner.temp }}/.cache/zizmor
        shell: sh
        run: >-
          uvx zizmor
          --format sarif
          --min-severity "${MIN_SEVERITY}"
          --min-confidence "${MIN_CONFIDENCE}"
          --cache-dir "${ZIZMOR_CACHE_DIR}"
          ${ZIZMOR_CONFIG:+--config "${ZIZMOR_CONFIG}"}
          ${RUNNER_DEBUG:+"--verbose"}
          .
          > results.sarif

      - name: Upload artifact
        uses: actions/upload-artifact@ea165f8d65b6e75b540449e92b4886f43607fa02 # v4.6.2
        with:
          name: SARIF file
          path: results.sarif
          retention-days: 5

      - name: Upload to code-scanning
        uses: github/codeql-action/upload-sarif@28deaeda66b76a05916b6923827895f2b14ab387 # v3.28.16
        continue-on-error: true
        with:
          sarif_file: results.sarif
          category: zizmor

      - name: Run zizmor with plain output
        if: always()
        id: zizmor-plain
        shell: bash
        env:
          ZIZMOR_CONFIG: ${{ steps.setup-config.outputs.zizmor-config }}
          ZIZMOR_CACHE_DIR: ${{ runner.temp }}/.cache/zizmor
        run: |
          set -o pipefail

          echo "zizmor-results<<EOF" >> "${GITHUB_OUTPUT}"
          # don't fail the build if zizmor fails - we want to capture the output
          # and the exit code
          set +e
          uvx zizmor \
            --format plain \
            --min-severity "${MIN_SEVERITY}" \
            --min-confidence "${MIN_CONFIDENCE}" \
            --cache-dir "${ZIZMOR_CACHE_DIR}" \
            ${RUNNER_DEBUG:+"--verbose"} \
            ${ZIZMOR_CONFIG:+--config "${ZIZMOR_CONFIG}"} \
            . \
            | tee -a "${GITHUB_OUTPUT}"
          zizmor_exit_code=$?
          set -e
          echo "EOF" >> "${GITHUB_OUTPUT}"

          # Error 1 is a failure of zizmor itself
          if [ "${zizmor_exit_code}" -eq 1 ]; then
            echo "zizmor itself failed - check the above output. failing the workflow."
            exit 1
          fi

          echo "zizmor-exit-code=${zizmor_exit_code}" | tee -a "${GITHUB_OUTPUT}"

      - name: Remove zizmor config
        env:
          ZIZMOR_CONFIG: ${{ steps.setup-config.outputs.zizmor-config }}
        if: steps.setup-config.outputs.zizmor-config
        run: rm "${ZIZMOR_CONFIG}"

      - name: Hide any previous comments
        if: ${{ !cancelled() && github.event.pull_request.head.repo.full_name == github.repository }}
        id: hide-comments
        uses: int128/hide-comment-action@0a9e7919192e41201af6ebd979df163956982d07 # v1.41.0
        with:
          ends-with: "<!-- comment-action/${{ github.workflow }}/${{ github.job }} -->"

      - name: Comment with zizmor results
        if: steps.zizmor-plain.outputs.zizmor-exit-code != 0 && github.event.pull_request.head.repo.full_name == github.repository
        uses: int128/comment-action@f81cfa94a4c24151591df1d74268a640875bfc8d # v1.37.0
        with:
          post: |
            :cry: zizmor failed with exit code ${{ steps.zizmor-plain.outputs.zizmor-exit-code }}.

            <details>
            <summary>Expand for full output</summary>

            ```
            ${{ steps.zizmor-plain.outputs.zizmor-results }}
            ```
            </details>
            ${{ steps.hide-comments.outputs.ends-with }}

      - name: Fail the build
        if: inputs.fail-severity != 'never' && steps.zizmor-plain.outputs.zizmor-exit-code != 0
        shell: sh
        env:
          FAIL_LEVEL: ${{ inputs.fail-severity }}
          EXIT_CODE: ${{ steps.zizmor-plain.outputs.zizmor-exit-code }}
        run: |
          case "${FAIL_LEVEL}" in
            any)
              FAIL_EXIT_CODE=10
              ;;
            informational)
              FAIL_EXIT_CODE=11
              ;;
            low)
              FAIL_EXIT_CODE=12
              ;;
            medium)
              FAIL_EXIT_CODE=13
              ;;
            high)
              FAIL_EXIT_CODE=14
              ;;
            *)
              echo "Unknown fail level: ${FAIL_LEVEL}"
              exit 1
              ;;
          esac

          if [ "${EXIT_CODE}" -ge "${FAIL_EXIT_CODE}" ]; then
            echo "Failing the build due to findings at or above ${FAIL_LEVEL} severity."
            exit 1
          fi
