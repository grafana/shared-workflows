name: zizmor (reusable)

on:
  workflow_call:
    inputs:
      min-severity: { type: string, default: low } # unknown|informational|low|medium|high
      min-confidence: { type: string, default: low } # unknown|low|medium|high
      fail-severity: { type: string, default: high } # never|any|informational|low|medium|high
      runs-on: { type: string, default: ubuntu-latest }

      # TODO: This should _not_ be inline. It should be a file like
      # `.github/zizmor.yml` alongside the reusable workflow. But
      # unfortunately we didn't find a way to load such a file so far.
      default-config:
        type: string
        description: Fallback Zizmor YAML when the repo doesn't provide its own
        default: |
          rules:
            unpinned-uses:
              config:
                policies:
                  actions/*: any # trust GitHub
                  grafana/*: any # trust Grafana

      always-use-default-config: { type: boolean, default: false }

permissions: { contents: read }

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

jobs:
  analysis:
    name: Generate and upload zizmor results 🌈
    runs-on: ${{ inputs.runs-on }}

    permissions:
      contents: read
      # comment with the results
      pull-requests: write
      # upload the results to code-scanning dashboard.
      security-events: write

    env:
      MIN_SEVERITY: ${{ inputs.min-severity }}
      MIN_CONFIDENCE: ${{ inputs.min-confidence }}
      FAIL_SEV: ${{ inputs.fail-severity }}
      # renovate: datasource=pypi depName=zizmor
      ZIZMOR_VERSION: "1.6.0"

    steps:
      - name: Checkout code
        uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4.2.2
        with: { persist-credentials: false }

      - name: 🛂 Validate inputs
        shell: sh
        run: |
          set -e
          validate() { case " $2 " in *" $1 "*) :;; *) echo "Invalid $3: $1"; exit 1;; esac; }
          validate "$MIN_SEVERITY"   "unknown informational low medium high"  min-severity
          validate "$MIN_CONFIDENCE" "unknown low medium high"               min-confidence
          validate "$FAIL_SEV"       "never any informational low medium high" fail-severity

      - name: 🔧 Set up Zizmor configuration
        id: cfg
        shell: sh
        env:
          DEF_CFG: ${{ inputs.default-config }}
          FORCE: ${{ inputs.always-use-default-config && '1' || '' }}
        run: |
          if [ -z "$FORCE" ]; then
            echo "🔍 Searching for user-provided zizmor.yml…"
            for f in zizmor.yml .github/zizmor.yml; do
              [ -f "$f" ] && { echo "✅ using $f"; exit 0; }
            done
            echo "None found - will fall back to default."
          else
            echo "🔒 always-use-default-config=true - forcing default config."
          fi

          file="$RUNNER_TEMP/zizmor.yml"
          printf '%s\n' "$DEF_CFG" > "$file"
          echo "file=$file" >> "$GITHUB_OUTPUT"
          echo "✅ wrote default config to $file"

      - uses: astral-sh/setup-uv@c7f87aa956e4c323abf06d5dec078e358f6b4d04 # v6.0.0

      - name: 🚀 Run Zizmor
        id: scan
        shell: bash
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          CFG: ${{ steps.cfg.outputs.file }}
        run: |
          set -euo pipefail
          sarif="$RUNNER_TEMP/zizmor.sarif"
          plain="$RUNNER_TEMP/zizmor.txt"

          echo "⬇️ Installing/reusing zizmor ${ZIZMOR_VERSION} …"
          uvx zizmor=="${ZIZMOR_VERSION}" \
            --format sarif \
            --min-severity   "$MIN_SEVERITY" \
            --min-confidence "$MIN_CONFIDENCE" \
            ${CFG:+--config "$CFG"} \
            . >"$sarif"
          code=$?

          jq -r '.runs[].results[]?.message.text' "$sarif" >"$plain" || true

          {
            echo "code=$code"
            echo "sarif=$sarif"
            echo "plain=$plain"
            echo "plain_contents<<EOF"
            cat "$plain"
            echo "EOF"
          } >>"$GITHUB_OUTPUT"

      - name: 📦 Upload SARIF artifact
        uses: actions/upload-artifact@ea165f8d65b6e75b540449e92b4886f43607fa02 # v4.6.2
        with:
          name: zizmor-sarif
          path: ${{ steps.scan.outputs.sarif }}
          retention-days: 5

      - name: ☁️ Upload to Code-scanning
        uses: github/codeql-action/upload-sarif@28deaeda66b76a05916b6923827895f2b14ab387 # v3.28.16
        with:
          sarif_file: ${{ steps.scan.outputs.sarif }}
          category: zizmor
        continue-on-error: true

      - name: 🙈 Hide previous comments
        if: >-
          !cancelled() &&
          github.event.pull_request.head.repo.full_name == github.repository
        uses: int128/hide-comment-action@0a9e7919192e41201af6ebd979df163956982d07 # v1.41.0
        with:
          ends-with: "<!-- comment-action/${{ github.workflow }}/${{ github.job }} -->"

      - name: 📝 Comment with zizmor results
        if: >-
          steps.scan.outputs.code != '0' &&
          github.event.pull_request.head.repo.full_name == github.repository
        uses: int128/comment-action@f81cfa94a4c24151591df1d74268a640875bfc8d # v1.37.0
        with:
          post: |
            :cry: **Zizmor** detected issues (exit `${{ steps.scan.outputs.code }}`).

            <details><summary>Expand for full output</summary>

            ```
            ${{ steps.scan.outputs.plain_contents }}
            ```
            </details>
            <!-- comment-action/${{ github.workflow }}/${{ github.job }} -->

      - name: 💥 Fail build if severity threshold met
        if: inputs.fail-severity != 'never'
        shell: bash
        env:
          CODE: ${{ steps.scan.outputs.code }}
          FAIL_SEV: ${{ env.FAIL_SEV }}
        run: |
          declare -A map=([any]=10 [informational]=11 [low]=12 [medium]=13 [high]=14)
          need=${map[$FAIL_SEV]:--1}
          if [ "$need" -ge 0 ] && [ "$CODE" -ge "$need" ]; then
            echo "🚨 Findings at or above $FAIL_SEV - failing the build."
            exit 1
          fi
          echo "✅ No findings at or above $FAIL_SEV"

      - if: steps.cfg.outputs.file
        name: 🧹 Remove temporary config
        run: rm -f "${{ steps.cfg.outputs.file }}"
