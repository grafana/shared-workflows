name: zizmor (reusable)

on:
  workflow_call:
    inputs:
      min-severity:
        description: "Only show results at or above this severity [possible values: unknown, informational, low, medium, high]"
        required: false
        type: string
        default: "low"

      min-confidence:
        description: "Only show results at or above this confidence level [possible values: unknown, low, medium, high]"
        required: false
        type: string
        default: "low"

      fail-severity:
        description: "Fail the build if any result is at or above this severity [possible values: never, any, informational, low, medium, high]"
        required: false
        type: string
        default: "high"

      runs-on:
        description: "The runner to use for jobs"
        required: false
        type: string
        default: "ubuntu-latest"

      # TODO: This should _not_ be inline. It should be a file like
      # `.github/zizmor.yml` alongside the reusable workflow. But
      # unfortunately we didn't find a way to load such a file so far.
      default-config:
        description: The default configuration to use.
        required: false
        type: string
        default: |
          rules:
            unpinned-uses:
              config:
                policies:
                  actions/*: any # trust GitHub
                  grafana/*: any # trust Grafana

      always-use-default-config:
        description: Whether to always use the default configuration.
        required: false
        type: boolean
        default: false

permissions: {}

jobs:
  analysis:
    name: Generate and upload zizmor results ðŸŒˆ

    runs-on: ${{ inputs.runs-on }}

    permissions:
      actions: read
      contents: read

      # comment with the results
      pull-requests: write
      # upload the results to code-scanning dashboard.
      security-events: write

    env:
      MIN_SEVERITY: ${{ inputs.min-severity }}
      MIN_CONFIDENCE: ${{ inputs.min-confidence }}

    steps:
      - name: Checkout code
        uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4.2.2
        with:
          persist-credentials: false

      - name: Set up Zizmor configuration
        id: setup-config
        env:
          DEFAULT_ZIZMOR_CONFIG: ${{ inputs.default-config }}
          FORCE_DEFAULT_CONFIG: ${{ inputs.always-use-default-config && 'true' || '' }}
        shell: sh
        run: |
          if [ -z "${FORCE_DEFAULT_CONFIG}" ]; then
            echo "Checking for user-provided zizmor configuration..."
            if [ -f "zizmor.yml" ]; then
              # No action needed, zizmor will find it
              echo "Using zizmor.yml found in repository root."
              exit 0
            fi

            if [ -f ".github/zizmor.yml" ]; then
              # No action needed, zizmor will find it
              echo "Using .github/zizmor.yml found in repository."
              exit 0
            fi

            echo "No user-provided zizmor.yml found in root or .github/. Using default zizmor config."
          else
            echo "always-use-default-config is set. Using default config."
          fi

          ZIZMOR_CONFIG="${{ runner.temp }}/zizmor.yml"
          cat <<EOC | tee ${ZIZMOR_CONFIG}
          ${DEFAULT_ZIZMOR_CONFIG}
          EOC
          echo "zizmor-config=${ZIZMOR_CONFIG}" | tee -a "${GITHUB_OUTPUT}"

      - name: Setup Rust
        uses: actions-rust-lang/setup-rust-toolchain@9d7e65c320fdb52dcd45ffaa68deb6c02c8754d9 # v1.12.0
        with:
          cache-on-failure: true

      - name: Get zizmor
        shell: sh
        env:
          # renovate: datasource=github-tags depName=woodruffw/zizmor
          ZIZMOR_VERSION: 1.6.0
        run: >-
          RUSTFLAGS=-Awarnings
          cargo
          install
          --version "${ZIZMOR_VERSION}"
          zizmor

      - name: Run zizmor
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          ZIZMOR_CONFIG: ${{ steps.setup-config.outputs.zizmor-config }}
        shell: sh
        run: >-
          zizmor
          --format sarif
          --min-severity "${MIN_SEVERITY}"
          --min-confidence "${MIN_CONFIDENCE}"
          ${ZIZMOR_CONFIG:+--config "${ZIZMOR_CONFIG}"}
          ${RUNNER_DEBUG:+"--verbose"}
          .
          > results.sarif

      - name: Upload artifact
        uses: actions/upload-artifact@ea165f8d65b6e75b540449e92b4886f43607fa02 # v4.6.2
        with:
          name: SARIF file
          path: results.sarif
          retention-days: 5

      - name: Upload to code-scanning
        uses: github/codeql-action/upload-sarif@28deaeda66b76a05916b6923827895f2b14ab387 # v3.28.16
        continue-on-error: true
        with:
          sarif_file: results.sarif
          category: zizmor

      - name: Run zizmor with plain output
        if: always()
        id: zizmor-plain
        shell: bash
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          ZIZMOR_CONFIG: ${{ steps.setup-config.outputs.zizmor-config }}
        run: |
          set -o pipefail

          echo "zizmor-results<<EOF" >> "${GITHUB_OUTPUT}"
          # don't fail the build if zizmor fails - we want to capture the output
          # and the exit code
          set +e
          zizmor \
            --format plain \
            --min-severity "${MIN_SEVERITY}" \
            --min-confidence "${MIN_CONFIDENCE}" \
            ${RUNNER_DEBUG:+"--verbose"} \
            ${ZIZMOR_CONFIG:+--config "${ZIZMOR_CONFIG}"} \
            . \
            | tee -a "${GITHUB_OUTPUT}"
          zizmor_exit_code=$?
          set -e
          echo "EOF" >> "${GITHUB_OUTPUT}"

          # Error 1 is a failure of zizmor itself
          if [ "${zizmor_exit_code}" -eq 1 ]; then
            echo "zizmor itself failed - check the above output. failing the workflow."
            exit 1
          fi

          echo "zizmor-exit-code=${zizmor_exit_code}" | tee -a "${GITHUB_OUTPUT}"

      - name: Remove zizmor config
        env:
          ZIZMOR_CONFIG: ${{ steps.setup-config.outputs.zizmor-config }}
        if: steps.setup-config.outputs.zizmor-config
        run: rm "${ZIZMOR_CONFIG}"

      - name: Hide any previous comments
        if: ${{ !cancelled() && github.event.pull_request.head.repo.full_name == github.repository }}
        id: hide-comments
        uses: int128/hide-comment-action@0a9e7919192e41201af6ebd979df163956982d07 # v1.41.0
        with:
          ends-with: "<!-- comment-action/${{ github.workflow }}/${{ github.job }} -->"

      - name: Comment with zizmor results
        if: steps.zizmor-plain.outputs.zizmor-exit-code != 0 && github.event.pull_request.head.repo.full_name == github.repository
        uses: int128/comment-action@f81cfa94a4c24151591df1d74268a640875bfc8d # v1.37.0
        with:
          post: |
            :cry: zizmor failed with exit code ${{ steps.zizmor-plain.outputs.zizmor-exit-code }}.

            <details>
            <summary>Expand for full output</summary>

            ```
            ${{ steps.zizmor-plain.outputs.zizmor-results }}
            ```
            </details>
            ${{ steps.hide-comments.outputs.ends-with }}

      - name: Fail the build
        if: inputs.fail-severity != 'never' && steps.zizmor-plain.outputs.zizmor-exit-code != 0
        shell: sh
        env:
          FAIL_LEVEL: ${{ inputs.fail-severity }}
          EXIT_CODE: ${{ steps.zizmor-plain.outputs.zizmor-exit-code }}
        run: |
          case "${FAIL_LEVEL}" in
            any)
              FAIL_EXIT_CODE=10
              ;;
            informational)
              FAIL_EXIT_CODE=11
              ;;
            low)
              FAIL_EXIT_CODE=12
              ;;
            medium)
              FAIL_EXIT_CODE=13
              ;;
            high)
              FAIL_EXIT_CODE=14
              ;;
            *)
              echo "Unknown fail level: ${FAIL_LEVEL}"
              exit 1
              ;;
          esac

          if [ "${EXIT_CODE}" -ge "${FAIL_EXIT_CODE}" ]; then
            echo "Failing the build due to findings at or above ${FAIL_LEVEL} severity."
            exit 1
          fi
