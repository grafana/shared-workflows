name: Push to artifact registry
description: Composite action to push a docker image to GAR or DockerHub

inputs:
  build-args:
    description: |
      List of arguments necessary for the Docker image to be built.
      Passed to `docker/build-push-action`.
  build-contexts:
    description: |
      List of additional build contexts (e.g., name=path).
      Passed to `docker/build-push-action`.
  buildkitd-config:
    description: |
      The buildkitd config file to use. Defaults to `/etc/buildkitd.toml` if you're using
      Grafana's self-hosted runners.
      Passed to `docker/setup-buildx-action`.
  buildkitd-config-inline:
    description: |
      The buildkitd inline config to use.
      Passed to `docker/setup-buildx-action`.
  cache-from:
    description: |
      Where cache should be fetched from.
      Passed to `docker/build-push-action`.
    default: type=gha
  cache-to:
    description: |
      Where cache should be stored to.
      Passed to `docker/build-push-action`.
    default: type=gha,mode=max
  context:
    description: |
      Path to the Docker build context.
      Passed to `docker/build-push-action`.
    default: .
  docker-buildx-driver:
    description: |
      The driver to use for Docker Buildx.
      Passed to `docker/setup-buildx-action`.
    default: docker-container
  dockerhub-registry:
    description: |
      DockerHub Registry to store docker images in.
    default: "docker.io"
  dockerhub-repository:
    description: |
      DockerHub Repository to store docker images in.
      Default: github.repository
    default: ${{ github.repository }}
  file:
    description: |
      The dockerfile to use.
      Passed to `docker/build-push-action`.
  gar-delete-credentials-file:
    description: |
      Delete the Google credentials file after the action is finished.
      If you want to keep the credentials file for a later step, set this to false.
    default: "true"
  gar-environment:
    description: |
      Environment for pushing artifacts (can be either dev or prod).
      This sets the GAR Project (gar-project) to either `grafanalabs-dev` or `grafanalabs-global`.
    default: dev
  gar-image:
    description: |
      Name of the image to build.
      Default: `${GitHub Repo Name}`.
  gar-registry:
    description: |
      Google Artifact Registry to store docker images in.
    default: "us-docker.pkg.dev"
  gar-repository:
    description: |
      Override the 'repo_name' used to construct the GAR repository name.
      Only necessary when the GAR includes a repo name that doesn't match the GitHub repo name.
      Default: `docker-${GitHub Repo Name}-${gar-environment}`
  include-tags-in-push:
    description: |
      Disables the pushing of tags, and instead includes just a list of images as docker tags.
      Used when pushing docker digests instead of docker tags.
    default: "true"
  labels:
    description: |
      List of custom labels to add to the image as metadata (passed to `docker/build-push-action`).
      Passed to `docker/build-push-action`.
  load:
    description: |
      Whether to load the built image into the local docker daemon (passed to `docker/build-push-action`).
      Passed to `docker/build-push-action`.
    default: "false"
  outputs:
    description: |
      List of docker output destinations.
      Passed to `docker/build-push-action`.
  platforms:
    description: |
      List of platforms to build the image for.
      Passed to `docker/build-push-action`.
  push:
    description: |
      Whether to push the image to the configured registries.
      Passed to `docker/build-push-action`.
  registries:
    description: |
      CSV list of registries to build images for.
      Accepted registries are "gar" and "dockerhub".
  secrets:
    description: |
      Secrets to expose to the build. Only needed when authenticating to private repositories outside the repository in which the image is being built.
      Passed to `docker/build-push-action`.
  ssh:
    description: |
      List of SSH agent socket or keys to expose to the build
      Passed to `docker/build-push-action`.
  tags:
    description: |
      List of Docker tags to be pushed.
      Passed to `docker/build-push-action`.
    required: true
  target:
    description: |
      Sets the target stage to build.
      Passed to `docker/build-push-action`.

outputs:
  annotations:
    description: "Generated annotations (from docker/metadata-action)"
    value: ${{ steps.meta.outputs.annotations }}
  digest:
    description: "Image digest (from docker/build-push-action)"
    value: ${{ steps.build.outputs.digest }}
  imageid:
    description: "Image ID (from docker/build-push-action)"
    value: ${{ steps.build.outputs.imageid }}
  images:
    description: "Comma separated list of the images that were built"
    value: ${{ steps.setup-vars.outputs.images }}
  json:
    description: "JSON output of tags and labels (from docker/metadata-action)"
    value: ${{ steps.meta.outputs.json }}
  labels:
    description: "Generated Docker labels (from docker/metadata-action)"
    value: ${{ steps.meta.outputs.labels }}
  metadata:
    description: "Build result metadata (from docker/build-push-action)"
    value: ${{ steps.build.outputs.metadata }}
  metadatajson:
    description: "Metadata JSON (from docker/metadata)"
    value: ${{ steps.meta.outputs.json }}s
  tags:
    description: "Generated Docker tags (from docker/metadata-action)"
    value: ${{ steps.meta.outputs.tags }}
  version:
    description: "Generated Docker image version (from docker/metadata-action)"
    value: ${{ steps.meta.outputs.version }}

runs:
  using: composite
  steps:
    - name: Checkout shared-workflows
      env:
        action_repo: ${{ github.action_repository }}
        action_ref: ${{ github.action_ref }}
      uses: actions/checkout@08c6903cd8c0fde910a37f88322edcfb5dd907a8 # v5.0.0
      with:
        repository: ${{ env.action_repo }}
        ref: ${{ env.action_ref }}
        path: _shared-workflows-docker-build-push-image
        persist-credentials: false

    - name: Set registries
      id: registries
      shell: bash
      env:
        REGISTRIES: ${{ inputs.registries }}
      run: |
        for r in ${REGISTRIES//,/ }; do
          echo "include-${r}=true" | tee -a "${GITHUB_OUTPUT}"
        done

    - name: Setup GAR variables
      id: setup-gar-vars
      if: ${{ steps.registries.outputs.include-gar == 'true' }}
      shell: bash
      env:
        GAR_REPO: ${{ inputs.gar-repository }}
        ENVIRONMENT: ${{ inputs.gar-environment }}
        GAR_IMAGE: ${{ inputs.gar-image }}
        REGISTRY: ${{ inputs.gar-registry }}
        GH_REPO: ${{ github.repository }}
      run: |
        chmod +x ./_shared-workflows-docker-build-push-image/actions/docker-build-push-image/gar-setup-project-vars.sh
        ./_shared-workflows-docker-build-push-image/actions/docker-build-push-image/gar-setup-project-vars.sh

    - name: Setup DockerHub variables
      if: ${{ steps.registries.outputs.include-dockerhub == 'true' }}
      id: setup-dockerhub-vars
      shell: bash
      env:
        DOCKERHUB_IMAGE: ${{ inputs.dockerhub-repository }}
        DOCKERHUB_REGISTRY: ${{ inputs.dockerhub-registry }}
      run: |
        chmod +x ./_shared-workflows-docker-build-push-image/actions/docker-build-push-image/dockerhub-setup-project-vars.sh
        ./_shared-workflows-docker-build-push-image/actions/docker-build-push-image/dockerhub-setup-project-vars.sh

    - name: Finalize build vars
      id: setup-vars
      shell: bash
      env:
        GAR_IMAGE: ${{ steps.setup-gar-vars.outputs.image }}
        DOCKERHUB_IMAGE: ${{ steps.setup-dockerhub-vars.outputs.image }}
      run: |
        images=""
        for image in "${GAR_IMAGE}" "${DOCKERHUB_IMAGE}"
        do
          # if an image is not the emptry string, add it to the list
          if [ -n "${image}" ]; then

            # if we already have any images, prefix a comma
            if [ -n "${images}" ]; then
              images="${images},${image}"
            else
              images="${image}"
            fi
          fi
        done
        echo "images=${images}" | tee -a "${GITHUB_OUTPUT}"

        if [ -z "${images}" ]; then
          echo "::warning::No registries have been selected, no images will be pushed"
          echo "images=dry-run-image" | tee -a "${GITHUB_OUTPUT}"
        fi

    - name: Login to GAR
      if: ${{ inputs.push == 'true' && steps.registries.outputs.include-gar == 'true' }}
      uses: ./_shared-workflows-docker-build-push-image/actions/login-to-gar

    - name: Login to DockerHub
      if: ${{ inputs.push == 'true' && steps.registries.outputs.include-dockerhub == 'true' }}
      uses: ./_shared-workflows-docker-build-push-image/actions/dockerhub-login # TODO: Write up an issue to convert this to actions/login-to-dockerhub

    - name: Extract metadata (tags, labels) for Docker
      id: meta
      uses: docker/metadata-action@c1e51972afc2121e065aed6d45c65596fe445f3f # v5.8.0
      with:
        images: ${{ steps.setup-vars.outputs.images }}
        tags: ${{ inputs.tags }}

    - name: Setup buildkitd-config
      id: buildkitd-config
      shell: sh
      env:
        BUILDKITD_CONFIG_INLINE: ${{ inputs.buildkitd-config-inline }}
        BUILDKITD_CONFIG: ${{ inputs.buildkitd-config }}
        DEFAULT_BUILDKITD_CONFIG: ${{ runner.environment == 'self-hosted' && '/etc/buildkitd.toml' || '' }}
      run: |
        # This step does the following:
        # if buildkitd-config-inline != "", use that
        # elif buildkitd-config != "", use that
        # else, use buildkitd-config default config if on self hosted runners

        buildkitd_config=""
        buildkitd_config_inline=""

        if [ -n "${BUILDKITD_CONFIG_INLINE}" ]; then
          buildkitd_config_inline="${BUILDKITD_CONFIG_INLINE}"
        elif [ -n "${BUILDKITD_CONFIG}" ]; then
          buildkitd_config="${BUILDKITD_CONFIG}"
        else
          buildkitd_config="${DEFAULT_BUILDKITD_CONFIG}"
        fi

        echo "buildkitd-config-inline=${buildkitd_config_inline}" | tee -a "${GITHUB_OUTPUT}"
        echo "buildkitd-config=${buildkitd_config}" | tee -a "${GITHUB_OUTPUT}"

    - name: Set up QEMU
      uses: docker/setup-qemu-action@29109295f81e9208d7d86ff1c6c12d2833863392 # v3.6.0

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@e468171a9de216ec08956ac3ada2f0791b6bd435 # v3.11.1
      with:
        driver: ${{ inputs.docker-buildx-driver }}
        version: latest # see https://github.com/docker/build-push-action/issues/1345#issuecomment-2770572479
        buildkitd-config: ${{ steps.buildkitd-config.outputs.buildkitd-config }}
        buildkitd-config-inline: ${{ steps.buildkitd-config.outputs.buildkitd-config-inline }}

    # The `context` input is flagged by Zizmor as a [sink]. This means that with
    # the upstream action the user's input to the input ends up in an output,
    # and so if it's not handled properly, it could lead to a template injection
    # attack. In this action, we do pass this back out via our `metadata`
    # output. However, we consider ourselves a proxy, so in that case our job is
    # to warn users but not to take any action.
    #
    # [sink]: https://github.blog/security/application-security/how-to-secure-your-github-actions-workflows-with-codeql/#models
    - name: Build the container # zizmor: ignore[template-injection]
      uses: docker/build-push-action@263435318d21b8e681c14492fe198d362a7d2c83 # v6.18.0
      id: build
      with:
        build-args: ${{ inputs.build-args }}
        build-contexts: ${{ inputs.build-contexts }}
        cache-from: ${{ inputs.cache-from }}
        cache-to: ${{ inputs.cache-to }}
        context: ${{ inputs.context }}
        file: ${{ inputs.file }}
        labels: ${{ inputs.labels }}
        load: ${{ inputs.load == 'true' }}
        platforms: ${{ inputs.platforms }}
        outputs: ${{ inputs.outputs }}
        push: ${{ inputs.push == 'true' }}
        secrets: ${{ inputs.secrets }}
        ssh: ${{ inputs.ssh }}
        tags: ${{ inputs.include-tags-in-push == 'true' && steps.meta.outputs.tags || steps.setup-vars.outputs.images }}
        target: ${{ inputs.target }}

    - name: Cleanup checkout directory
      if: ${{ !cancelled() }}
      shell: bash
      run: |
        # Check that the directory looks OK before removing it
        if ! [ -d "_shared-workflows-docker-build-push-image/.git" ]; then
          echo "::warning Not removing shared workflows directory: doesn't look like a git repository"
          exit 0
        fi

        rm -rf _shared-workflows-docker-build-push-image

    - name: Delete Google Application Credentials file
      if: ${{ inputs.gar-delete-credentials-file == 'true' && env.GOOGLE_APPLICATION_CREDENTIALS != '' }}
      shell: sh
      run: |
        if [ -f "${GOOGLE_APPLICATION_CREDENTIALS}" ]; then
          rm -f "${GOOGLE_APPLICATION_CREDENTIALS}"
          echo "::notice::Successfully deleted credentials file"
        else
          echo "::warning::Credentials file not found at ${GOOGLE_APPLICATION_CREDENTIALS}"
        fi
      env:
        GOOGLE_APPLICATION_CREDENTIALS: ${{ env.GOOGLE_APPLICATION_CREDENTIALS }}
