name: Setup Argo
description: Setup Argo cli and add it to the PATH, this action will pull the binary from GitHub releases and store it in cache for the next run.

inputs:
  cache-prefix:
    description: Prefix for the cache key.
    default: argo

  version:
    description: |
      Version of the Argo CLI to install.
    default: 3.5.1

outputs:
  cache-hit:
    description: Whether the cache was hit or not.
    value: ${{ steps.cache.outputs.cache-hit || 'false' }}

runs:
  using: composite

  steps:
    - name: Setup cache
      id: cache
      uses: actions/cache@0c45773b623bea8c8e75f6c82b208c3cf94ea4f9 # v4.0.2
      with:
        path: ${{ github.workspace }}/bin/argo
        key: ${{ inputs.cache-prefix }}-${{ runner.os }}-${{ runner.arch }}-${{ inputs.version }}

    - name: Normalize runner.os to match Argo release
      if: steps.cache.outputs.cache-hit != 'true'
      shell: bash
      env:
        OS: ${{ runner.os }}
      run: |
        OS=$(echo "$OS" | tr '[:upper:]' '[:lower:]')
        [[ "$OS" == 'macos' ]] && OS='darwin'
        echo "OS=$OS" >> "$GITHUB_ENV"

    # runner.arch options: X86, X64, ARM, or ARM64.
    # argo release: arm64, amd64, ppc64le, s390x.
    # If it ain't arm64 or amd64, it'll fall back to runner.arch.
    - if: runner.arch == 'X64' && steps.cache.outputs.cache-hit != 'true'
      shell: sh
      run: echo "ARCH=amd64" >> "$GITHUB_ENV"

    - if: runner.arch == 'ARM64' && steps.cache.outputs.cache-hit != 'true'
      shell: sh
      run: echo "ARCH=arm64" >> "$GITHUB_ENV"

    - name: Fetch Github Release Asset
      id: fetch_asset
      if: steps.cache.outputs.cache-hit != 'true'
      uses: dsaltares/fetch-gh-release-asset@a40c8b4a0471f9ab81bdf73a010f74cc51476ad4 # 1.1.1
      with:
        repo: "argoproj/argo-workflows"
        version: "tags/v${{ inputs.version }}"
        file: "argo-${{ env.OS }}-${{ env.ARCH || runner.arch }}.gz"
        target: ${{ github.workspace }}/bin/argo.gz

    - name: gunzip
      id: gunzip
      if: steps.fetch_asset.outcome == 'success'
      shell: sh
      run: |
        # Overwrite the argo binary if it already exists. We assume it's from a
        # previous run of this action.
        gunzip --force ${{ github.workspace }}/bin/argo.gz
        chmod +x ${{ github.workspace }}/bin/argo

    - name: Add binary to path
      shell: sh
      run: |
        # Check if `argo` is already in the PATH
        if command -v argo >/dev/null; then
          echo "argo is already in the PATH, not re-adding it"
          exit 0
        fi

        echo "Adding '${{ github.workspace }}/bin' to the PATH so the 'argo' binary can be found"
        echo "${{ github.workspace }}/bin" >> "${GITHUB_PATH}"
