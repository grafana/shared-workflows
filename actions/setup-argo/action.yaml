name: Setup Argo
description: Setup Argo cli and add it to the PATH, this action will pull the binary from GitHub releases and store it in cache for the next run.

inputs:
  cache-prefix:
    description: Prefix for the cache key.
    default: argo

  version:
    description: |
      Version of the Argo CLI to install.
    default: 3.5.1

outputs:
  cache-hit:
    description: Whether the cache was hit or not.
    value: ${{ steps.cache.outputs.cache-hit || 'false' }}

runs:
  using: composite

  steps:
    - name: Setup cache
      id: cache
      uses: actions/cache@0400d5f644dc74513175e3cd8d07132dd4860809 # v4.2.4
      with:
        path: /usr/local/bin/argo
        key: ${{ inputs.cache-prefix }}-${{ runner.os }}-${{ runner.arch }}-${{ inputs.version }}

    - name: Map OS and ARCH to Argo release artifact
      id: os-arch
      if: steps.cache.outputs.cache-hit != 'true'
      shell: sh
      run: |
        echo "OS=$(go env GOOS)" | tee -a "${GITHUB_OUTPUT}"
        echo "ARCH=$(go env GOARCH)" | tee -a "${GITHUB_OUTPUT}"

    - name: Fetch Github Release Asset
      id: fetch_asset
      if: steps.cache.outputs.cache-hit != 'true'
      uses: dsaltares/fetch-gh-release-asset@aa2ab1243d6e0d5b405b973c89fa4d06a2d0fff7 # 1.1.2
      with:
        repo: "argoproj/argo-workflows"
        version: "tags/v${{ inputs.version }}"
        file: "argo-${{ steps.os-arch.outputs.OS }}-${{ steps.os-arch.outputs.ARCH }}${{ steps.os-arch.outputs.OS == 'windows' && '.exe' || '' }}.gz"
        target: /usr/local/bin/argo.gz

    - name: gunzip
      id: gunzip
      if: steps.fetch_asset.outcome == 'success'
      shell: sh
      run: |
        # Overwrite the argo binary if it already exists. We assume it's from a
        # previous run of this action.
        gunzip --force /usr/local/bin/argo.gz
        chmod +x /usr/local/bin/argo
