name: Download and Merge Docker Digests into Manifest(s)
description: Composite action to export and upload docker manifest(s)

inputs:
  docker-metadata-json:
    description: |
      Docker metadata JSON, from `docker-build-push-image` or `docker/build-push-action`.
    default: ""
  gar-environment:
    description: |
      Environment for pushing artifacts (can be either dev or prod).
      This sets the GAR Project to either `grafanalabs-dev` or `grafanalabs-global`.
    default: "dev"
  images:
    description: |
      CSV of Docker images to push. These images should not include tags.
      Ex: us-docker.pkg.dev/grafanalabs-dev/gar-registry/image-name,docker.io/grafana/dockerhub-image
    required: true
  push:
    description: |
      Whether to push the manifest to the configured registries.
    default: "false"
  tags:
    description: |
      List of Docker tags to be pushed.
    required: true

runs:
  using: composite
  steps:
    - name: Checkout shared-workflows
      env:
        action_repo: ${{ github.action_repository }}
        action_ref: ${{ github.action_ref }}
      uses: actions/checkout@08c6903cd8c0fde910a37f88322edcfb5dd907a8 # v5.0.0
      with:
        repository: ${{ env.action_repo }}
        ref: ${{ env.action_ref }}
        path: _shared-workflows-docker-import-digests-push-manifests
        persist-credentials: false

    - name: Download digests
      uses: actions/download-artifact@634f93cb2916e3fdff6788551b99b062d0335ce0 # v5.0.0
      with:
        path: ${{ runner.temp }}/digests
        pattern: digests-*
        merge-multiple: true

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@e468171a9de216ec08956ac3ada2f0791b6bd435 # v3.11.1
      with:
        driver: docker-container
        version: latest # see https://github.com/docker/build-push-action/issues/1345#issuecomment-2770572479

    - name: Prepare vars
      id: prepare-vars
      if: ${{ inputs.push == 'true' }}
      env:
        IMAGES: ${{ inputs.images }}
      shell: bash
      run: |
        ##################################################################
        # This step parses the input image list to determine if
        # docker images or gar images have been passed in... so we
        # can determine which systems to login to.
        ##################################################################

        set -euo pipefail

        DOCKERHUB_IMAGE=false
        GAR_IMAGE=false

        IFS=',' read -ra IMAGE_LIST <<< "${IMAGES}"

        for image in "${IMAGE_LIST[@]}"; do
          image="$(echo "$image" | xargs)"  # trim spaces
          registry="${image%%/*}"  # everything before first slash
          echo "Verifying image: $image"
          echo "Verifying registry: $registry"

          # Default if there's no dot or colon (Docker Hub shorthand)
          if [[ "$registry" != *.* && "$registry" != *:* ]]; then
            DOCKERHUB_IMAGE=true
          fi

          if [[ "$registry" == *".pkg.dev" ]] || [[ "$registry" == *"gcr.io" ]]; then
            echo "$image → Google Artifact Registry"
            GAR_IMAGE=true
          elif [[ "$registry" == "docker.io" ]] || [[ "$registry" == "index.docker.io" ]]; then
            echo "$image → DockerHub"
            DOCKERHUB_IMAGE=true
          else
            echo "$image → Other registry ($registry)"
          fi
        done

        if [[ "$DOCKERHUB_IMAGE" == "true" ]]; then
          echo "include-dockerhub=true" | tee -a "${GITHUB_OUTPUT}"
        fi
        if [[ "$GAR_IMAGE" == "true" ]]; then
          echo "include-gar=true" | tee -a "${GITHUB_OUTPUT}"
        fi

    - name: Login to GAR
      if: ${{ steps.prepare-vars.outputs.include-gar == 'true' }}
      uses: ./_shared-workflows-docker-import-digests-push-manifests/actions/login-to-gar

    - name: Login to DockerHub
      if: ${{ steps.prepare-vars.outputs.include-dockerhub == 'true' }}
      uses: ./_shared-workflows-docker-import-digests-push-manifests/actions/dockerhub-login

    - name: Extract metadata (tags, labels) for Docker
      id: meta
      uses: docker/metadata-action@c1e51972afc2121e065aed6d45c65596fe445f3f # v5.8.0
      with:
        images: ${{ inputs.images }}
        tags: ${{ inputs.tags }}

    - name: Create manifest list and push
      working-directory: ${{ runner.temp }}/digests
      shell: bash
      env:
        IMAGES: ${{ inputs.images }}
        PUSH: ${{ inputs.push }}
      run: |
        set -euo pipefail
        echo "ls -lah ${{ runner.temp }}/digests"
        ls -lah ${{ runner.temp }}/digests

        if [ "${PUSH}" != "true" ]; then
          echo "::warning::push=${PUSH}, no images will be pushed"
        fi

        if [ -n "${IMAGES}" ]; then
          for image in ${IMAGES//,/ }; do
            echo docker buildx imagetools create \
            $(jq -cr '.tags | map("-t " + .) | join(" ")' <<< "$DOCKER_METADATA_OUTPUT_JSON") \
            $(printf "${image}@sha256:%s " *)

            if [ "${PUSH}" == "true" ]; then
              docker buildx imagetools create \
              $(jq -cr '.tags | map("-t " + .) | join(" ")' <<< "$DOCKER_METADATA_OUTPUT_JSON") \
              $(printf "${image}@sha256:%s " *)
            else
              echo Skipping command since push is set to false.
            fi
          done
        else
          echo "::warning::No images to push, skipping imagetools creation"
        fi

    - name: Inspect image
      shell: bash
      if: ${{ inputs.push == 'true' }}
      run: |
        for tag in $(jq -r '.tags[]' <<< "$DOCKER_METADATA_OUTPUT_JSON"); do
          echo ""
          echo "Inspecting $tag"
          docker buildx imagetools inspect "$tag"
        done
