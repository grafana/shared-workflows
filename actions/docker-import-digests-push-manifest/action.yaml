name: Download and Merge Digests into Manifest
description: Composite action to export and upload a docker manifest

inputs: # TODO: Fill in descriptions
  images:
    description: |
      Lorem ipsum explainum
    required: true
  gar-environment:
    description: |
      Lorem ipsum explainum
    default: "dev"
  push-to-gar:
    description: |
      Push resulting manifest to Google Artifact Registry
    default: "false"
  push-to-dockerhub:
    description: |
      Push resulting manifest to DockerHub
    default: "false"
  docker-metadata-json:
    description: |
      IPSUM Descriptionum
    default: ""

runs:
  using: composite
  steps:
    - name: Download digests
      uses: actions/download-artifact@634f93cb2916e3fdff6788551b99b062d0335ce0 # v5.0.0
      with:
        path: ${{ runner.temp }}/digests
        pattern: digests-*
        merge-multiple: true

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@e468171a9de216ec08956ac3ada2f0791b6bd435 # v3.11.1
      with:
        driver: docker-container
        version: latest # see https://github.com/docker/build-push-action/issues/1345#issuecomment-2770572479

    - name: Login to GAR
      if: ${{ inputs.push-to-gar == 'true' }}
      uses: grafana/shared-workflows/actions/login-to-gar@rwhitaker/multi-arch-builds
      with:
        environment: ${{ inputs.gar-environment }}
        delete_credentials_file: false

    - name: Login to DockerHub
      if: ${{ inputs.push-to-dockerhub == 'true' }}
      uses: grafana/shared-workflows/actions/dockerhub-login@rwhitaker/multi-arch-builds

    # TODO: Add --dry-run if not configured to push anywhere
    - name: Create manifest list and push
      working-directory: ${{ runner.temp }}/digests
      shell: bash
      env:
        IMAGES: ${{ inputs.images }}
        DOCKER_METADATA_OUTPUT_JSON: ${{ inputs.docker-metadata-json }}
      run: |
        echo "ls -lah ${{ runner.temp }}/digests"
        ls -lah ${{ runner.temp }}/digests

        for image in ${IMAGES//,/ }; do
          echo docker buildx imagetools create \
          $(jq -cr '.tags | map("-t " + .) | join(" ")' <<< "$DOCKER_METADATA_OUTPUT_JSON") \
          $(printf "${image}@sha256:%s " *)

          docker buildx imagetools create \
          $(jq -cr '.tags | map("-t " + .) | join(" ")' <<< "$DOCKER_METADATA_OUTPUT_JSON") \
          $(printf "${image}@sha256:%s " *)
        done

    - name: Inspect image
      shell: bash
      env:
        DOCKER_METADATA_OUTPUT_JSON: ${{ inputs.docker-metadata-json }}
      run: |
        for tag in $(jq -r '.tags[]' <<< "$DOCKER_METADATA_OUTPUT_JSON"); do
          echo ""
          echo "Inspecting $tag"
          docker buildx imagetools inspect "$tag"
        done
