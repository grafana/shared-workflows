name: Login to artifact registry
description: Composite action to push to Google Artifact Registry
inputs:
  registry:
    description: |
      Google Artifact Registry to authenticate against.
    default: "us-docker.pkg.dev"
  delete_credentials_file:
    description: |
      Delete the credentials file after the action is finished. 
      If you want to keep the credentials file for a later step, set this to false.
    default: "false"

runs:
  using: composite
  steps:
    - uses: google-github-actions/auth@ba79af03959ebeac9769e648f473a284504d9193 # v2.1.10
      name: Auth with direct WIF
      id: auth_with_direct_wif
      with:
        project_id: "grafanalabs-workload-identity"
        workload_identity_provider: "projects/304398677251/locations/global/workloadIdentityPools/github/providers/github-provider"

    - name: Install docker-credential-gcr
      shell: bash
      env:
        DOCKER_CREDENTIAL_GCR_VERSION: "v2.1.28"
      run: | # zizmor: ignore[github-env]
        set -ex

        # Install docker-credential-gcr:
        # - if version is "tip", install from tip of main.
        # - if version is "latest-release", look up latest release.
        # - otherwise, install the specified version.
        case "${DOCKER_CREDENTIAL_GCR_VERSION}" in
        tip)
          echo "Installing docker-credential-gcr using go install"
          go install github.com/GoogleCloudPlatform/docker-credential-gcr@main
          ;;
        latest-release)
          tag=$(curl -L -s -u "username:${{ github.token }}" https://api.github.com/repos/GoogleCloudPlatform/docker-credential-gcr/releases/latest | jq -r '.tag_name')
          ;;
        *)
          tag="${DOCKER_CREDENTIAL_GCR_VERSION}"
        esac

        # Normalize OS name
        os="${{ runner.os }}"
        case "$os" in
          macOS) os="darwin" ;;
          Linux) os="linux" ;;
          Windows) os="windows" ;;
          *) echo "Unknown OS: $os"; exit 1 ;;
        esac

        # Map runner.arch to release asset arch
        arch="${{ runner.arch }}"
        case "$arch" in
          X64)   arch="amd64" ;;
          ARM64) arch="arm64" ;;
          *)     echo "Unsupported arch: $arch"; exit 1 ;;
        esac

        if [[ ! -z ${tag} ]]; then
          echo "Installing docker-credential-gcr @ ${tag} for ${os}/${arch}"
          mkdir -p "${RUNNER_TEMP}/docker-credential-gcr"
          curl -fsL "https://github.com/GoogleCloudPlatform/docker-credential-gcr/releases/download/${tag}/docker-credential-gcr_${os}_${arch}-${tag:1}.tar.gz" | tar xzf - -C "${RUNNER_TEMP}/docker-credential-gcr" docker-credential-gcr
          # Ignoring the github-env warning - docker-credential-gcr binary must be on the PATH for credHelpers in /.docker/config.json to work.
          # We are only adding a path to a binary that was just downloaded in RUNNER_TEMP (controlled by GitHub Actions).
          echo "${RUNNER_TEMP}/docker-credential-gcr" >> $GITHUB_PATH
        fi
    - name: "Configure GCP Artifact Registry"
      id: configure-docker
      shell: sh
      env:
        REGISTRY: ${{ inputs.registry }}
      run: docker-credential-gcr configure-docker --registries="${REGISTRY}"
    - name: Delete Google Application Credentials file
      shell: sh
      run: |
        if [ -f "${{ env.GOOGLE_APPLICATION_CREDENTIALS }}" ]; then
          rm -f "${{ env.GOOGLE_APPLICATION_CREDENTIALS }}"
          echo "::notice::Successfully deleted credentials file"
        else
          echo "::warning::Credentials file not found at ${{ env.GOOGLE_APPLICATION_CREDENTIALS }}"
        fi
